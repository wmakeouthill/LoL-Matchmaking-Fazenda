package br.com.lolmatchmaking.backend.scheduled;

import br.com.lolmatchmaking.backend.dto.QueueStatusDTO;
import br.com.lolmatchmaking.backend.service.EventBroadcastService;
import br.com.lolmatchmaking.backend.service.QueueManagementService;
import br.com.lolmatchmaking.backend.service.redis.RedisQueueCacheService;
import br.com.lolmatchmaking.backend.websocket.SessionRegistry;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

/**
 * ‚úÖ Scheduled Task de Broadcast Autom√°tico da Fila
 * 
 * PROBLEMA RESOLVIDO:
 * - Fila n√£o atualizava em tempo real (precisava clicar em "Atualizar")
 * - Discord funcionava em tempo real, mas fila usava polling
 * - Clientes s√≥ viam mudan√ßas ap√≥s 15 segundos (polling interval)
 * 
 * SOLU√á√ÉO:
 * - Broadcast autom√°tico da fila a cada 3 segundos
 * - Publicar via Redis Pub/Sub (todas inst√¢ncias fazem broadcast)
 * - TODOS os clientes recebem atualiza√ß√£o via WebSocket push
 * - Fila funciona EM TEMPO REAL (igual Discord)
 * 
 * FLUXO:
 * 1. A cada 3 segundos:
 * - Buscar status da fila do banco
 * - Cachear no Redis
 * - Publicar via Pub/Sub
 * 2. Todas as inst√¢ncias recebem evento
 * 3. Todas fazem broadcast via WebSocket
 * 4. TODOS os clientes recebem atualiza√ß√£o
 * 
 * RESULTADO:
 * - Fila atualiza automaticamente (sem clicar)
 * - Sincronizado entre todos os jogadores
 * - Igual Discord (tempo real)
 * 
 * REFER√äNCIA:
 * - ARQUITETURA-CORRETA-SINCRONIZACAO.md#scheduled-task-de-broadcast-autom√°tico
 * - TODO-CORRECOES-PRODUCAO.md#41
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class QueueBroadcastScheduledTask {

    private final QueueManagementService queueManagementService;
    private final EventBroadcastService eventBroadcastService;
    private final RedisQueueCacheService redisQueueCache;
    private final SessionRegistry sessionRegistry;
    private final RedisTemplate<String, Object> redisTemplate;

    /**
     * ‚úÖ BROADCAST AUTOM√ÅTICO DA FILA A CADA 3 SEGUNDOS
     * 
     * Garante que todos os clientes tenham a fila atualizada em tempo real,
     * mesmo que n√£o haja eventos de entrar/sair.
     * 
     * ‚ö†Ô∏è IMPORTANTE: Apenas jogadores que est√£o REALMENTE na fila (n√£o em
     * draft/game)
     * 
     * Executado a cada 3 segundos para manter fila sincronizada.
     */
    @Scheduled(fixedRate = 3000) // A cada 3 segundos
    public void broadcastQueueStatusAutomatic() {
        try {
            // ‚úÖ NOVO: VERIFICAR SE H√Å SESS√ïES ATIVAS ANTES DE FAZER BROADCAST
            if (!hasActiveSessions()) {
                log.debug("‚è≠Ô∏è [QueueBroadcast] Nenhuma sess√£o ativa, pulando broadcast...");
                return;
            }

            // 1. Buscar status da fila (APENAS jogadores que est√£o aguardando)
            // getQueueStatus j√° filtra jogadores que est√£o em match/draft
            QueueStatusDTO status = queueManagementService.getQueueStatus(null);

            if (status == null) {
                log.warn("‚ö†Ô∏è [QueueBroadcast] Status nulo, pulando broadcast");
                return;
            }

            // ‚úÖ FILTRO: N√£o fazer broadcast se n√£o houver jogadores na fila
            // Isso evita enviar eventos vazios para jogadores em draft/game
            if (status.getPlayersInQueue() == 0) {
                log.debug("‚è≠Ô∏è [QueueBroadcast] Fila vazia, pulando broadcast (jogadores podem estar em partida)");
                return;
            }

            // 2. Cachear no Redis (para performance)
            redisQueueCache.cacheQueueStatus(status);

            // 3. Publicar via Pub/Sub (todas inst√¢ncias fazem broadcast)
            // ‚úÖ NOTA: Apenas jogadores na tela de fila receber√£o este evento
            // Jogadores em draft/game ignoram este evento
            eventBroadcastService.publishQueueUpdate(status);

            log.info("‚úÖ [QueueBroadcast] Broadcast autom√°tico executado: {} jogadores em tempo real",
                    status.getPlayersInQueue());

        } catch (Exception e) {
            log.error("‚ùå [QueueBroadcast] Erro no broadcast autom√°tico da fila", e);
        }
    }

    /**
     * ‚úÖ Limpeza peri√≥dica de estados expirados (a cada 5 minutos)
     * 
     * Remove estados de jogadores que ficaram √≥rf√£os no Redis.
     */
    @Scheduled(fixedRate = 300000) // A cada 5 minutos
    public void cleanupExpiredStates() {
        try {
            log.debug("üßπ [QueueBroadcast] Limpeza de estados expirados...");
            // A limpeza √© feita automaticamente pelo TTL do Redis
            // Este m√©todo serve apenas para log/monitoramento

        } catch (Exception e) {
            log.error("‚ùå [QueueBroadcast] Erro na limpeza de estados", e);
        }
    }

    /**
     * ‚úÖ Log de estat√≠sticas do sistema (a cada 1 minuto)
     * 
     * √ötil para monitoramento e debugging.
     */
    @Scheduled(fixedRate = 60000) // A cada 1 minuto
    public void logSystemStats() {
        try {
            // ‚úÖ NOVO: VERIFICAR SE H√Å SESS√ïES ATIVAS ANTES DE FAZER LOG
            if (!hasActiveSessions()) {
                log.debug("‚è≠Ô∏è [QueueBroadcast] Nenhuma sess√£o ativa, pulando log de estat√≠sticas...");
                return;
            }

            QueueStatusDTO status = queueManagementService.getQueueStatus(null);

            if (status != null) {
                log.info("üìä [Estat√≠sticas] Fila: {} jogadores | Tempo m√©dio: {}s",
                        status.getPlayersInQueue(), status.getAverageWaitTime());
            }

        } catch (Exception e) {
            log.error("‚ùå [QueueBroadcast] Erro ao coletar estat√≠sticas", e);
        }
    }

    // ‚úÖ NOVO: Cache infinito - s√≥ invalida quando algu√©m conecta
    private volatile boolean hasActiveSessionsCache = false;
    private volatile boolean cacheInitialized = false;
    private volatile long lastCacheInvalidationCheck = 0;

    /**
     * ‚úÖ NOVO: Verifica se h√° sess√µes WebSocket ativas com cache infinito
     * 
     * Cache infinito: se n√£o tem sess√µes, n√£o verifica mais at√© algu√©m conectar
     * S√≥ verifica novamente quando cache √© invalidado via Redis
     */
    private boolean hasActiveSessions() {
        try {
            // ‚úÖ VERIFICAR REDIS: Se cache foi invalidado por nova conex√£o
            boolean cacheInvalidated = checkRedisCacheInvalidation();

            // ‚úÖ CACHE INFINITO: Se j√° verificou e n√£o havia sess√µes, n√£o verificar mais
            if (cacheInitialized && !hasActiveSessionsCache && !cacheInvalidated) {
                return false; // Retorna cache (sem log, sem verifica√ß√£o)
            }

            // Verificar se h√° sess√µes WebSocket ativas (primeira vez ou ap√≥s invalida√ß√£o)
            int activeSessions = sessionRegistry.getActiveSessionCount();

            // Atualizar cache
            cacheInitialized = true;
            hasActiveSessionsCache = (activeSessions > 0);

            if (activeSessions > 0) {
                log.info("‚úÖ [QueueBroadcast] {} sess√µes ativas encontradas - sistema acordou", activeSessions);
                return true;
            }

            // ‚úÖ Log apenas uma vez quando sistema "dorme"
            log.info("üí§ [Cloud Run] Sistema dormindo - 0 sess√µes ativas (inst√¢ncia pode hibernar)");
            return false;

        } catch (Exception e) {
            log.error("‚ùå [QueueBroadcast] Erro ao verificar sess√µes ativas", e);
            // Em caso de erro, assumir que h√° sess√µes (comportamento seguro)
            return true;
        }
    }

    /**
     * ‚úÖ NOVO: Verifica se cache foi invalidado via Redis
     * 
     * @return true se cache foi invalidado por nova conex√£o
     */
    private boolean checkRedisCacheInvalidation() {
        try {
            String cacheInvalidationKey = "cache:session_invalidation";
            Object invalidationTimestamp = redisTemplate.opsForValue().get(cacheInvalidationKey);

            if (invalidationTimestamp != null) {
                long timestamp = Long.parseLong(invalidationTimestamp.toString());
                if (timestamp > lastCacheInvalidationCheck) {
                    lastCacheInvalidationCheck = timestamp;
                    log.debug("üîÑ [QueueBroadcast] Cache invalidado via Redis (timestamp: {})", timestamp);
                    return true;
                }
            }
            return false;
        } catch (Exception e) {
            log.debug("Erro ao verificar invalida√ß√£o de cache via Redis: {}", e.getMessage());
            return false;
        }
    }
}
