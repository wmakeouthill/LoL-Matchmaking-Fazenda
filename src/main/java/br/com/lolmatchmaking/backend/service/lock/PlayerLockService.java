package br.com.lolmatchmaking.backend.service.lock;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.time.Duration;

/**
 * ‚úÖ Service de Lock de Jogador (Player Lock)
 * 
 * PROBLEMA RESOLVIDO:
 * - Jogador abrindo m√∫ltiplas inst√¢ncias do Electron simultaneamente
 * - Perda de vincula√ß√£o de sess√£o WebSocket com jogador
 * - M√∫ltiplas conex√µes do mesmo jogador em inst√¢ncias diferentes
 * 
 * SOLU√á√ÉO:
 * - Lock por customSessionId (player_{gameName}_{tagLine}) vinculando jogador a
 * uma sess√£o
 * - Detecta se jogador j√° est√° conectado ao abrir Electron
 * - Previne duplica√ß√£o de conex√µes
 * - Libera automaticamente ao fechar Electron
 * 
 * CHAVES REDIS:
 * - lock:player:{customSessionId} ‚Üí sessionId vinculado
 * 
 * REFER√äNCIA:
 * - ARQUITETURA-CORRETA-SINCRONIZACAO.md#2-lock-de-jogador-player-lock
 * - TODO-CORRECOES-PRODUCAO.md#12
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class PlayerLockService {

    private final RedisTemplate<String, Object> redisTemplate;

    // ‚úÖ CORRIGIDO: Prefixo de chave usando customSessionId (n√£o summonerName com
    // espa√ßos)
    private static final String PLAYER_LOCK_PREFIX = "lock:player:";

    // ‚úÖ CORRIGIDO: TTL de 4 horas (sess√£o de jogo completa)
    // Com force release inteligente, pode ser maior sem riscos:
    // - Lock liberado ao fechar Electron (afterConnectionClosed)
    // - Force release se sess√£o antiga n√£o existe (reconex√£o)
    // - Player pode ficar em draft + game por 1-2 horas
    private static final Duration LOCK_TTL = Duration.ofHours(4);

    /**
     * ‚úÖ NOVO: Gera customSessionId consistente baseado em gameName e tagLine
     * Formato: player_{gameName}_{tagline} (lowercase, caracteres especiais
     * removidos)
     * 
     * Exemplo: FZD Ratoso#fzd -> player_fzd_ratoso_fzd
     */
    public static String generateCustomSessionId(String gameName, String tagLine) {
        if (gameName == null || gameName.isBlank() || tagLine == null || tagLine.isBlank()) {
            return null;
        }

        String fullName = gameName + "#" + tagLine;
        return "player_" + fullName
                .replace("#", "_")
                .replaceAll("[^a-zA-Z0-9_]", "_")
                .toLowerCase();
    }

    /**
     * ‚úÖ Adquire lock para o jogador usando customSessionId como CHAVE
     * e armazena sessionId aleat√≥ria como VALOR
     * 
     * Arquitetura correta:
     * - CHAVE: lock:player:{customSessionId} (ex:
     * lock:player:player_fzd_ratoso_fzd)
     * - VALOR: sessionId aleat√≥ria (ex: c32db208-d5ec-17e1-bc36-dcd63ac8092d)
     * 
     * Vantagens:
     * - Chave imut√°vel baseada no jogador (n√£o muda entre conex√µes)
     * - Valor cont√©m sessionId atual para identifica√ß√£o r√°pida
     * - Permite verificar se jogador j√° est√° conectado (chave existe)
     * 
     * @param customSessionId ID da sess√£o customizada (player_{gameName}_{tagLine})
     * @param sessionId       ID da sess√£o WebSocket aleat√≥ria
     * @return sessionId vinculado se sucesso, null se jogador j√° est√° conectado
     */
    public String acquirePlayerLock(String customSessionId, String sessionId) {
        if (customSessionId == null || customSessionId.isBlank()) {
            log.warn("‚ö†Ô∏è [PlayerLock] CustomSessionId inv√°lido, usando sessionId como fallback");
            customSessionId = sessionId;
        }

        // ‚úÖ CHAVE do lock: customSessionId (imut√°vel baseado no jogador)
        String key = PLAYER_LOCK_PREFIX + customSessionId;

        try {
            // Tentar adquirir lock armazenando sessionId aleat√≥ria
            Boolean acquired = redisTemplate.opsForValue()
                    .setIfAbsent(key, sessionId, LOCK_TTL);

            if (Boolean.TRUE.equals(acquired)) {
                log.info("üîí [PlayerLock] Lock adquirido: {} ‚Üí session {}", customSessionId, sessionId);
                return sessionId;
            }

            // Verificar se j√° tem lock desta mesma sess√£o
            String existingSession = (String) redisTemplate.opsForValue().get(key);
            if (sessionId.equals(existingSession)) {
                log.info("‚úÖ [PlayerLock] Lock j√° era desta sess√£o: {}", customSessionId);
                // Renovar TTL
                redisTemplate.expire(key, LOCK_TTL);
                return sessionId;
            }

            log.warn("‚ö†Ô∏è [PlayerLock] Jogador {} J√Å conectado em outra sess√£o: {}",
                    customSessionId, existingSession);
            return null;

        } catch (Exception e) {
            log.error("‚ùå [PlayerLock] Erro ao adquirir lock para {}", customSessionId, e);
            return null;
        }
    }

    /**
     * ‚úÖ Libera lock do jogador
     * 
     * Chamar ao fechar WebSocket (onClose) ou ao jogador fazer logout.
     * 
     * @param customSessionId ID da sess√£o customizada
     */
    public void releasePlayerLock(String customSessionId) {
        if (customSessionId == null || customSessionId.isBlank()) {
            log.warn("‚ö†Ô∏è [PlayerLock] CustomSessionId inv√°lido para liberar lock");
            return;
        }

        String key = PLAYER_LOCK_PREFIX + customSessionId;

        try {
            Boolean deleted = redisTemplate.delete(key);

            if (Boolean.TRUE.equals(deleted)) {
                log.info("üîì [PlayerLock] Lock liberado: {}", customSessionId);
            } else {
                log.debug("‚ö†Ô∏è [PlayerLock] Lock j√° estava liberado ou expirou: {}", customSessionId);
            }

        } catch (Exception e) {
            log.error("‚ùå [PlayerLock] Erro ao liberar lock de {}", customSessionId, e);
        }
    }

    /**
     * ‚úÖ Obt√©m sessionId vinculado ao jogador
     * 
     * @param customSessionId ID da sess√£o customizada
     * @return sessionId vinculado, ou null se jogador n√£o est√° conectado
     */
    public String getPlayerSession(String customSessionId) {
        if (customSessionId == null || customSessionId.isBlank()) {
            return null;
        }

        String key = PLAYER_LOCK_PREFIX + customSessionId;

        try {
            Object session = redisTemplate.opsForValue().get(key);
            return session != null ? (String) session : null;

        } catch (Exception e) {
            log.error("‚ùå [PlayerLock] Erro ao obter sess√£o de {}", customSessionId, e);
            return null;
        }
    }

    /**
     * ‚úÖ Verifica se jogador tem sess√£o ativa
     * 
     * @param customSessionId ID da sess√£o customizada
     * @return true se jogador est√° conectado, false caso contr√°rio
     * 
     *         √ötil para detectar ao abrir Electron se jogador j√° est√° conectado.
     */
    public boolean hasActiveSession(String customSessionId) {
        String existingSession = getPlayerSession(customSessionId);
        return existingSession != null;
    }

    /**
     * ‚úÖ Renova TTL do lock do jogador
     * 
     * Chamar periodicamente (ex: a cada mensagem WebSocket) para manter
     * a sess√£o ativa e prevenir expira√ß√£o por inatividade.
     * 
     * @param customSessionId ID da sess√£o customizada
     * @return true se conseguiu renovar, false caso contr√°rio
     */
    public boolean renewPlayerLock(String customSessionId) {
        if (customSessionId == null || customSessionId.isBlank()) {
            return false;
        }

        String key = PLAYER_LOCK_PREFIX + customSessionId;

        try {
            Boolean renewed = redisTemplate.expire(key, LOCK_TTL);

            if (Boolean.TRUE.equals(renewed)) {
                log.debug("‚ôªÔ∏è [PlayerLock] TTL renovado para {}", customSessionId);
                return true;
            }

            log.debug("‚ö†Ô∏è [PlayerLock] N√£o foi poss√≠vel renovar TTL de {} (lock n√£o existe)",
                    customSessionId);
            return false;

        } catch (Exception e) {
            log.error("‚ùå [PlayerLock] Erro ao renovar lock de {}", customSessionId, e);
            return false;
        }
    }

    /**
     * ‚úÖ Obt√©m tempo restante do lock do jogador (em segundos)
     * 
     * @param customSessionId ID da sess√£o customizada
     * @return tempo restante em segundos, ou -1 se n√£o h√° lock
     */
    public long getPlayerLockTtl(String customSessionId) {
        if (customSessionId == null || customSessionId.isBlank()) {
            return -1;
        }

        String key = PLAYER_LOCK_PREFIX + customSessionId;

        try {
            Long ttl = redisTemplate.getExpire(key);
            return ttl != null ? ttl : -1;

        } catch (Exception e) {
            log.error("‚ùå [PlayerLock] Erro ao obter TTL de {}", customSessionId, e);
            return -1;
        }
    }

    /**
     * ‚úÖ For√ßa libera√ß√£o do lock do jogador (usar apenas em emerg√™ncias)
     * 
     * ‚ö†Ô∏è ATEN√á√ÉO: Use apenas se tiver certeza que a sess√£o est√° morta
     * e o lock n√£o foi liberado corretamente.
     * 
     * @param customSessionId ID da sess√£o customizada
     * @return true se conseguiu for√ßar libera√ß√£o, false caso contr√°rio
     */
    public boolean forceReleasePlayerLock(String customSessionId) {
        if (customSessionId == null || customSessionId.isBlank()) {
            return false;
        }

        String key = PLAYER_LOCK_PREFIX + customSessionId;

        try {
            Boolean deleted = redisTemplate.delete(key);

            if (Boolean.TRUE.equals(deleted)) {
                log.warn("‚ö†Ô∏è [PlayerLock] Lock FOR√áADAMENTE liberado para: {}", customSessionId);
                return true;
            }

            return false;

        } catch (Exception e) {
            log.error("‚ùå [PlayerLock] Erro ao for√ßar libera√ß√£o de {}", customSessionId, e);
            return false;
        }
    }

    /**
     * ‚úÖ Transfere lock do jogador para nova sess√£o
     * 
     * √ötil para reconex√£o: se mesma sess√£o precisa novo ID.
     * 
     * @param customSessionId ID da sess√£o customizada
     * @param oldSessionId    Sess√£o antiga
     * @param newSessionId    Nova sess√£o
     * @return true se conseguiu transferir, false caso contr√°rio
     */
    public boolean transferPlayerLock(String customSessionId, String oldSessionId, String newSessionId) {
        if (customSessionId == null || customSessionId.isBlank()) {
            return false;
        }

        String key = PLAYER_LOCK_PREFIX + customSessionId;

        try {
            // Verificar se lock existe e pertence √† sess√£o antiga
            String currentSession = getPlayerSession(customSessionId);
            if (currentSession == null) {
                log.warn("‚ö†Ô∏è [PlayerLock] N√£o h√° lock para transferir: {}", customSessionId);
                return false;
            }

            if (!oldSessionId.equals(currentSession)) {
                log.warn("‚ö†Ô∏è [PlayerLock] Lock de {} pertence a outra sess√£o: {} (esperado: {})",
                        customSessionId, currentSession, oldSessionId);
                return false;
            }

            // Atualizar para nova sess√£o
            redisTemplate.opsForValue().set(key, newSessionId, LOCK_TTL);
            log.info("üîÑ [PlayerLock] Lock transferido: {} de session {} para {}",
                    customSessionId, oldSessionId, newSessionId);
            return true;

        } catch (Exception e) {
            log.error("‚ùå [PlayerLock] Erro ao transferir lock de {}", customSessionId, e);
            return false;
        }
    }
}
