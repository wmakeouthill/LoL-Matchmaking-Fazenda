package br.com.lolmatchmaking.backend.service.lock;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.time.Duration;

/**
 * Servi√ßo para gerenciar locks distribu√≠dos de opera√ß√µes do Discord.
 * 
 * Previne race conditions em:
 * - Atualiza√ß√£o de usu√°rios do Discord (m√∫ltiplas inst√¢ncias)
 * - Vincula√ß√£o de contas (duplo-clique, m√∫ltiplas inst√¢ncias)
 * - Desvincula√ß√£o de contas
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class DiscordLockService {

    private final RedisTemplate<String, Object> redisTemplate;

    private static final String UPDATE_LOCK_PREFIX = "discord:update:lock";
    private static final String LINK_LOCK_PREFIX = "discord:link:lock";
    private static final long UPDATE_LOCK_TTL = 10; // segundos
    private static final long LINK_LOCK_TTL = 15; // segundos

    /**
     * Adquire lock para atualizar lista de usu√°rios do Discord.
     * 
     * Previne m√∫ltiplas inst√¢ncias do backend processando o mesmo evento JDA
     * simultaneamente (ex: onGuildVoiceUpdate).
     * 
     * @return true se lock foi adquirido, false se j√° existe
     */
    public boolean acquireDiscordUpdateLock() {
        try {
            String lockKey = UPDATE_LOCK_PREFIX;
            Boolean acquired = redisTemplate.opsForValue()
                    .setIfAbsent(lockKey, "locked", Duration.ofSeconds(UPDATE_LOCK_TTL));

            if (Boolean.TRUE.equals(acquired)) {
                log.debug("üîí [DiscordLock] Lock de atualiza√ß√£o adquirido");
                return true;
            }

            log.debug("‚è≥ [DiscordLock] Lock de atualiza√ß√£o j√° existe, pulando");
            return false;
        } catch (Exception e) {
            log.error("‚ùå [DiscordLock] Erro ao adquirir lock de atualiza√ß√£o: {}", e.getMessage());
            return false;
        }
    }

    /**
     * Libera lock de atualiza√ß√£o de usu√°rios.
     * 
     * DEVE ser chamado sempre em finally block para garantir libera√ß√£o.
     */
    public void releaseDiscordUpdateLock() {
        try {
            String lockKey = UPDATE_LOCK_PREFIX;
            redisTemplate.delete(lockKey);
            log.debug("üîì [DiscordLock] Lock de atualiza√ß√£o liberado");
        } catch (Exception e) {
            log.error("‚ùå [DiscordLock] Erro ao liberar lock de atualiza√ß√£o: {}", e.getMessage());
        }
    }

    /**
     * Adquire lock para vincula√ß√£o de conta Discord ‚Üî LoL.
     * 
     * Previne:
     * - Duplo-clique no comando /vincular
     * - M√∫ltiplas inst√¢ncias processando mesma vincula√ß√£o
     * - Vincula√ß√£o + Desvincula√ß√£o simult√¢neas
     * 
     * @param discordUserId ID do usu√°rio Discord
     * @return true se lock foi adquirido, false se j√° existe
     */
    public boolean acquireUserLinkLock(String discordUserId) {
        try {
            String lockKey = LINK_LOCK_PREFIX + ":" + discordUserId;
            Boolean acquired = redisTemplate.opsForValue()
                    .setIfAbsent(lockKey, "locked", Duration.ofSeconds(LINK_LOCK_TTL));

            if (Boolean.TRUE.equals(acquired)) {
                log.debug("üîí [DiscordLock] Lock de vincula√ß√£o adquirido: {}", discordUserId);
                return true;
            }

            log.debug("‚è≥ [DiscordLock] Lock de vincula√ß√£o j√° existe: {}", discordUserId);
            return false;
        } catch (Exception e) {
            log.error("‚ùå [DiscordLock] Erro ao adquirir lock de vincula√ß√£o: {}", e.getMessage());
            return false;
        }
    }

    /**
     * Libera lock de vincula√ß√£o de usu√°rio.
     * 
     * DEVE ser chamado sempre em finally block para garantir libera√ß√£o.
     * 
     * @param discordUserId ID do usu√°rio Discord
     */
    public void releaseUserLinkLock(String discordUserId) {
        try {
            String lockKey = LINK_LOCK_PREFIX + ":" + discordUserId;
            redisTemplate.delete(lockKey);
            log.debug("üîì [DiscordLock] Lock de vincula√ß√£o liberado: {}", discordUserId);
        } catch (Exception e) {
            log.error("‚ùå [DiscordLock] Erro ao liberar lock de vincula√ß√£o: {}", e.getMessage());
        }
    }

    /**
     * Verifica se existe lock de atualiza√ß√£o ativo.
     * 
     * @return true se lock existe
     */
    public boolean isUpdateLocked() {
        try {
            String lockKey = UPDATE_LOCK_PREFIX;
            Boolean exists = redisTemplate.hasKey(lockKey);
            return Boolean.TRUE.equals(exists);
        } catch (Exception e) {
            log.error("‚ùå [DiscordLock] Erro ao verificar lock: {}", e.getMessage());
            return false;
        }
    }

    /**
     * Verifica se usu√°rio espec√≠fico tem lock de vincula√ß√£o ativo.
     * 
     * @param discordUserId ID do usu√°rio Discord
     * @return true se lock existe
     */
    public boolean isUserLinkLocked(String discordUserId) {
        try {
            String lockKey = LINK_LOCK_PREFIX + ":" + discordUserId;
            Boolean exists = redisTemplate.hasKey(lockKey);
            return Boolean.TRUE.equals(exists);
        } catch (Exception e) {
            log.error("‚ùå [DiscordLock] Erro ao verificar lock de vincula√ß√£o: {}", e.getMessage());
            return false;
        }
    }

    /**
     * For√ßa libera√ß√£o do lock de atualiza√ß√£o (usar apenas em emerg√™ncia).
     * 
     * √ötil se uma inst√¢ncia crashar sem liberar o lock.
     */
    public void forceReleaseDiscordUpdateLock() {
        try {
            String lockKey = UPDATE_LOCK_PREFIX;
            redisTemplate.delete(lockKey);
            log.warn("‚ö†Ô∏è [DiscordLock] Lock de atualiza√ß√£o FOR√áADAMENTE liberado");
        } catch (Exception e) {
            log.error("‚ùå [DiscordLock] Erro ao for√ßar libera√ß√£o de lock: {}", e.getMessage());
        }
    }

    /**
     * For√ßa libera√ß√£o do lock de vincula√ß√£o de um usu√°rio (usar apenas em
     * emerg√™ncia).
     * 
     * @param discordUserId ID do usu√°rio Discord
     */
    public void forceReleaseUserLinkLock(String discordUserId) {
        try {
            String lockKey = LINK_LOCK_PREFIX + ":" + discordUserId;
            redisTemplate.delete(lockKey);
            log.warn("‚ö†Ô∏è [DiscordLock] Lock de vincula√ß√£o FOR√áADAMENTE liberado: {}", discordUserId);
        } catch (Exception e) {
            log.error("‚ùå [DiscordLock] Erro ao for√ßar libera√ß√£o de lock de vincula√ß√£o: {}", e.getMessage());
        }
    }
}
