package br.com.lolmatchmaking.backend.service.lock;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.time.Duration;

/**
 * Servi√ßo para gerenciar locks distribu√≠dos de vota√ß√£o e vincula√ß√£o de
 * partidas.
 * 
 * Previne race conditions em:
 * - Vota√ß√£o de vencedor (m√∫ltiplos votos simult√¢neos)
 * - Vincula√ß√£o de match com LCU (m√∫ltiplas vincula√ß√µes)
 * - Detec√ß√£o de "6 votos atingidos" por m√∫ltiplas inst√¢ncias
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class MatchVoteLockService {

    private final RedisTemplate<String, Object> redisTemplate;

    private static final String VOTE_LOCK_PREFIX = "match:vote:lock";
    private static final String LINK_LOCK_PREFIX = "match:link:lock";
    private static final long VOTE_LOCK_TTL = 15; // segundos
    private static final long LINK_LOCK_TTL = 30; // segundos

    /**
     * Adquire lock para registrar voto de um jogador.
     * 
     * Previne:
     * - Duplo voto do mesmo jogador (duplo-clique)
     * - M√∫ltiplas inst√¢ncias processando mesmo voto
     * - Race condition ao detectar "6 votos atingidos"
     * 
     * @param matchId  ID da partida
     * @param playerId ID do jogador
     * @return true se lock foi adquirido, false se j√° existe
     */
    public boolean acquireVoteLock(Long matchId, Long playerId) {
        try {
            String lockKey = VOTE_LOCK_PREFIX + ":" + matchId + ":" + playerId;
            Boolean acquired = redisTemplate.opsForValue()
                    .setIfAbsent(lockKey, "locked", Duration.ofSeconds(VOTE_LOCK_TTL));

            if (Boolean.TRUE.equals(acquired)) {
                log.debug("üîí [MatchVoteLock] Lock de voto adquirido: match={}, player={}",
                        matchId, playerId);
                return true;
            }

            log.debug("‚è≥ [MatchVoteLock] Lock de voto j√° existe: match={}, player={}",
                    matchId, playerId);
            return false;
        } catch (Exception e) {
            log.error("‚ùå [MatchVoteLock] Erro ao adquirir lock de voto: {}", e.getMessage());
            return false;
        }
    }

    /**
     * Libera lock de voto.
     * 
     * DEVE ser chamado sempre em finally block para garantir libera√ß√£o.
     * 
     * @param matchId  ID da partida
     * @param playerId ID do jogador
     */
    public void releaseVoteLock(Long matchId, Long playerId) {
        try {
            String lockKey = VOTE_LOCK_PREFIX + ":" + matchId + ":" + playerId;
            redisTemplate.delete(lockKey);
            log.debug("üîì [MatchVoteLock] Lock de voto liberado: match={}, player={}",
                    matchId, playerId);
        } catch (Exception e) {
            log.error("‚ùå [MatchVoteLock] Erro ao liberar lock de voto: {}", e.getMessage());
        }
    }

    /**
     * Adquire lock para vincular partida com dados do LCU.
     * 
     * Previne:
     * - M√∫ltiplas vincula√ß√µes simult√¢neas
     * - Duplo c√°lculo de LP
     * - Dupla atualiza√ß√£o do banco
     * - Dupla limpeza de canais Discord
     * 
     * @param matchId ID da partida
     * @return true se lock foi adquirido, false se j√° existe
     */
    public boolean acquireLinkLock(Long matchId) {
        try {
            String lockKey = LINK_LOCK_PREFIX + ":" + matchId;
            Boolean acquired = redisTemplate.opsForValue()
                    .setIfAbsent(lockKey, "locked", Duration.ofSeconds(LINK_LOCK_TTL));

            if (Boolean.TRUE.equals(acquired)) {
                log.debug("üîí [MatchVoteLock] Lock de vincula√ß√£o adquirido: matchId={}", matchId);
                return true;
            }

            log.debug("‚è≥ [MatchVoteLock] Lock de vincula√ß√£o j√° existe: matchId={}", matchId);
            return false;
        } catch (Exception e) {
            log.error("‚ùå [MatchVoteLock] Erro ao adquirir lock de vincula√ß√£o: {}", e.getMessage());
            return false;
        }
    }

    /**
     * Libera lock de vincula√ß√£o.
     * 
     * DEVE ser chamado sempre em finally block para garantir libera√ß√£o.
     * 
     * @param matchId ID da partida
     */
    public void releaseLinkLock(Long matchId) {
        try {
            String lockKey = LINK_LOCK_PREFIX + ":" + matchId;
            redisTemplate.delete(lockKey);
            log.debug("üîì [MatchVoteLock] Lock de vincula√ß√£o liberado: matchId={}", matchId);
        } catch (Exception e) {
            log.error("‚ùå [MatchVoteLock] Erro ao liberar lock de vincula√ß√£o: {}", e.getMessage());
        }
    }

    /**
     * Verifica se existe lock de voto ativo.
     * 
     * @param matchId  ID da partida
     * @param playerId ID do jogador
     * @return true se lock existe
     */
    public boolean isVoteLocked(Long matchId, Long playerId) {
        try {
            String lockKey = VOTE_LOCK_PREFIX + ":" + matchId + ":" + playerId;
            Boolean exists = redisTemplate.hasKey(lockKey);
            return Boolean.TRUE.equals(exists);
        } catch (Exception e) {
            log.error("‚ùå [MatchVoteLock] Erro ao verificar lock de voto: {}", e.getMessage());
            return false;
        }
    }

    /**
     * Verifica se existe lock de vincula√ß√£o ativo.
     * 
     * @param matchId ID da partida
     * @return true se lock existe
     */
    public boolean isLinkLocked(Long matchId) {
        try {
            String lockKey = LINK_LOCK_PREFIX + ":" + matchId;
            Boolean exists = redisTemplate.hasKey(lockKey);
            return Boolean.TRUE.equals(exists);
        } catch (Exception e) {
            log.error("‚ùå [MatchVoteLock] Erro ao verificar lock de vincula√ß√£o: {}", e.getMessage());
            return false;
        }
    }

    /**
     * For√ßa libera√ß√£o do lock de voto (usar apenas em emerg√™ncia).
     * 
     * @param matchId  ID da partida
     * @param playerId ID do jogador
     */
    public void forceReleaseVoteLock(Long matchId, Long playerId) {
        try {
            String lockKey = VOTE_LOCK_PREFIX + ":" + matchId + ":" + playerId;
            redisTemplate.delete(lockKey);
            log.warn("‚ö†Ô∏è [MatchVoteLock] Lock de voto FOR√áADAMENTE liberado: match={}, player={}",
                    matchId, playerId);
        } catch (Exception e) {
            log.error("‚ùå [MatchVoteLock] Erro ao for√ßar libera√ß√£o de lock de voto: {}",
                    e.getMessage());
        }
    }

    /**
     * For√ßa libera√ß√£o do lock de vincula√ß√£o (usar apenas em emerg√™ncia).
     * 
     * @param matchId ID da partida
     */
    public void forceReleaseLinkLock(Long matchId) {
        try {
            String lockKey = LINK_LOCK_PREFIX + ":" + matchId;
            redisTemplate.delete(lockKey);
            log.warn("‚ö†Ô∏è [MatchVoteLock] Lock de vincula√ß√£o FOR√áADAMENTE liberado: matchId={}",
                    matchId);
        } catch (Exception e) {
            log.error("‚ùå [MatchVoteLock] Erro ao for√ßar libera√ß√£o de lock de vincula√ß√£o: {}",
                    e.getMessage());
        }
    }
}
