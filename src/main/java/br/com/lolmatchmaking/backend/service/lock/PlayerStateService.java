package br.com.lolmatchmaking.backend.service.lock;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.time.Duration;

/**
 * ‚úÖ Service de Gerenciamento de Estado do Jogador
 * 
 * PROBLEMA RESOLVIDO:
 * - Jogador em m√∫ltiplos estados simultaneamente
 * - Jogador em partida sendo selecionado para nova partida
 * - Dados se perdendo durante transi√ß√µes de estado
 * - Race conditions em mudan√ßas de estado
 * 
 * SOLU√á√ÉO:
 * - Estado centralizado no Redis
 * - Valida√ß√£o de transi√ß√µes de estado
 * - Lock durante mudan√ßa de estado (thread-safe)
 * - Estados bem definidos: AVAILABLE, IN_QUEUE, IN_MATCH_FOUND, IN_DRAFT,
 * IN_GAME
 * 
 * FLUXO DE ESTADOS:
 * AVAILABLE ‚Üí IN_QUEUE ‚Üí IN_MATCH_FOUND ‚Üí IN_DRAFT ‚Üí IN_GAME ‚Üí AVAILABLE
 * 
 * CHAVES REDIS:
 * - state:player:{summonerName} ‚Üí PlayerState atual
 * - lock:state:{summonerName} ‚Üí Lock tempor√°rio para mudan√ßa de estado
 * 
 * REFER√äNCIA:
 * -
 * ARQUITETURA-CORRETA-SINCRONIZACAO.md#3-lock-de-estado-do-jogador-player-state-lock
 * - TODO-CORRECOES-PRODUCAO.md#13
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class PlayerStateService {

    private final RedisTemplate<String, Object> redisTemplate;

    // Prefixos de chave
    private static final String STATE_PREFIX = "state:player:";
    private static final String STATE_LOCK_PREFIX = "lock:state:";

    // ‚úÖ CORRIGIDO: TTL de 4 horas (ALINHADO com PlayerLock)
    // CR√çTICO: Deve ser >= PlayerLock TTL para evitar estado expirar antes da
    // sess√£o
    // Player pode ficar conectado por horas (draft longo + game longo)
    private static final Duration STATE_TTL = Duration.ofHours(4);

    // TTL do lock de mudan√ßa de estado: 5 segundos (tempo para processar mudan√ßa)
    private static final Duration STATE_LOCK_TTL = Duration.ofSeconds(5);

    /**
     * ‚úÖ Atualiza estado do jogador (thread-safe com lock)
     * 
     * @param summonerName Nome do jogador
     * @param newState     Novo estado
     * @return true se conseguiu atualizar, false se falhou (transi√ß√£o inv√°lida ou
     *         lock n√£o adquirido)
     * 
     *         Exemplo de uso:
     * 
     *         <pre>
     *         if (playerStateService.setPlayerState(summonerName, PlayerState.IN_QUEUE)) {
     *             // Estado atualizado com sucesso
     *             addToQueue(summonerName);
     *         } else {
     *             // Falha ao atualizar estado (jogador j√° est√° em partida?)
     *             log.warn("N√£o foi poss√≠vel adicionar jogador √† fila");
     *         }
     *         </pre>
     */
    public boolean setPlayerState(String summonerName, PlayerState newState) {
        String stateKey = STATE_PREFIX + summonerName;
        String lockKey = STATE_LOCK_PREFIX + summonerName;

        // ‚úÖ LOCK: Apenas uma thread pode mudar estado por vez
        Boolean lockAcquired = redisTemplate.opsForValue()
                .setIfAbsent(lockKey, "locked", STATE_LOCK_TTL);

        if (Boolean.FALSE.equals(lockAcquired)) {
            log.warn("‚ö†Ô∏è [PlayerState] Falha ao adquirir lock de estado para {}", summonerName);
            return false;
        }

        try {
            // Obter estado atual
            PlayerState currentState = getPlayerState(summonerName);

            // ‚úÖ VALIDAR TRANSI√á√ÉO DE ESTADO
            if (!isValidTransition(currentState, newState)) {
                log.error("‚ùå [PlayerState] Transi√ß√£o de estado inv√°lida: {} ‚Üí {} para {}",
                        currentState, newState, summonerName);
                return false;
            }

            // ‚úÖ ATUALIZAR ESTADO
            redisTemplate.opsForValue().set(stateKey, newState.name(), STATE_TTL);

            log.info("‚úÖ [PlayerState] Estado atualizado: {} ‚Üí {} ({})",
                    summonerName, currentState, newState);
            return true;

        } catch (Exception e) {
            log.error("‚ùå [PlayerState] Erro ao atualizar estado de {}", summonerName, e);
            return false;

        } finally {
            // ‚úÖ SEMPRE LIBERAR LOCK
            redisTemplate.delete(lockKey);
        }
    }

    /**
     * ‚úÖ Obt√©m estado atual do jogador
     * 
     * @param summonerName Nome do jogador
     * @return Estado atual (AVAILABLE se n√£o h√° estado definido)
     */
    public PlayerState getPlayerState(String summonerName) {
        String key = STATE_PREFIX + summonerName;

        try {
            Object stateObj = redisTemplate.opsForValue().get(key);

            if (stateObj == null) {
                return PlayerState.AVAILABLE; // Estado padr√£o
            }

            String stateName = (String) stateObj;
            return PlayerState.valueOf(stateName);

        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è [PlayerState] Estado inv√°lido para {}, retornando AVAILABLE", summonerName);
            return PlayerState.AVAILABLE;

        } catch (Exception e) {
            log.error("‚ùå [PlayerState] Erro ao obter estado de {}", summonerName, e);
            return PlayerState.AVAILABLE;
        }
    }

    /**
     * ‚úÖ Verifica se jogador pode entrar na fila
     * 
     * @param summonerName Nome do jogador
     * @return true se est√° AVAILABLE, false caso contr√°rio
     */
    public boolean canJoinQueue(String summonerName) {
        PlayerState state = getPlayerState(summonerName);
        return state.canJoinQueue();
    }

    /**
     * ‚úÖ Verifica se jogador est√° em partida
     * 
     * @param summonerName Nome do jogador
     * @return true se est√° em IN_MATCH_FOUND, IN_DRAFT ou IN_GAME
     */
    public boolean isInMatch(String summonerName) {
        PlayerState state = getPlayerState(summonerName);
        return state.isInMatch();
    }

    /**
     * ‚úÖ Valida se transi√ß√£o de estado √© permitida
     * 
     * Fluxo permitido:
     * - AVAILABLE ‚Üí IN_QUEUE
     * - IN_QUEUE ‚Üí IN_MATCH_FOUND ou AVAILABLE (saiu da fila)
     * - IN_MATCH_FOUND ‚Üí IN_DRAFT ou AVAILABLE (recusou)
     * - IN_DRAFT ‚Üí IN_GAME ou AVAILABLE (cancelou)
     * - IN_GAME ‚Üí AVAILABLE (terminou jogo)
     * 
     * @param from Estado atual
     * @param to   Novo estado
     * @return true se transi√ß√£o √© v√°lida, false caso contr√°rio
     */
    private boolean isValidTransition(PlayerState from, PlayerState to) {
        if (from == null) {
            from = PlayerState.AVAILABLE;
        }

        // Permitir transi√ß√£o para o mesmo estado (idempot√™ncia)
        if (from == to) {
            return true;
        }

        switch (from) {
            case AVAILABLE:
                // De AVAILABLE s√≥ pode ir para IN_QUEUE
                return to == PlayerState.IN_QUEUE;

            case IN_QUEUE:
                // De IN_QUEUE pode ir para IN_MATCH_FOUND (partida encontrada) ou AVAILABLE
                // (saiu da fila)
                return to == PlayerState.IN_MATCH_FOUND || to == PlayerState.AVAILABLE;

            case IN_MATCH_FOUND:
                // De IN_MATCH_FOUND pode ir para IN_DRAFT (aceitou) ou AVAILABLE
                // (recusou/timeout)
                return to == PlayerState.IN_DRAFT || to == PlayerState.AVAILABLE;

            case IN_DRAFT:
                // De IN_DRAFT pode ir para IN_GAME (draft completo) ou AVAILABLE (cancelou)
                return to == PlayerState.IN_GAME || to == PlayerState.AVAILABLE;

            case IN_GAME:
                // De IN_GAME s√≥ pode voltar para AVAILABLE (jogo terminou)
                return to == PlayerState.AVAILABLE;

            default:
                log.error("‚ùå [PlayerState] Estado desconhecido: {}", from);
                return false;
        }
    }

    /**
     * ‚úÖ For√ßa mudan√ßa de estado sem valida√ß√£o (usar apenas em emerg√™ncias)
     * 
     * ‚ö†Ô∏è ATEN√á√ÉO: Este m√©todo bypassa a valida√ß√£o de transi√ß√µes.
     * Use apenas para corrigir estados inconsistentes.
     * 
     * @param summonerName Nome do jogador
     * @param newState     Novo estado
     * @return true se conseguiu for√ßar mudan√ßa, false caso contr√°rio
     */
    public boolean forceSetPlayerState(String summonerName, PlayerState newState) {
        String key = STATE_PREFIX + summonerName;

        try {
            redisTemplate.opsForValue().set(key, newState.name(), STATE_TTL);
            log.warn("‚ö†Ô∏è [PlayerState] Estado FOR√áADAMENTE alterado para {}: {}",
                    summonerName, newState);
            return true;

        } catch (Exception e) {
            log.error("‚ùå [PlayerState] Erro ao for√ßar estado de {}", summonerName, e);
            return false;
        }
    }

    /**
     * ‚úÖ Remove estado do jogador (volta para AVAILABLE)
     * 
     * @param summonerName Nome do jogador
     */
    public void clearPlayerState(String summonerName) {
        String key = STATE_PREFIX + summonerName;

        try {
            Boolean deleted = redisTemplate.delete(key);

            if (Boolean.TRUE.equals(deleted)) {
                log.info("üóëÔ∏è [PlayerState] Estado removido para {}", summonerName);
            }

        } catch (Exception e) {
            log.error("‚ùå [PlayerState] Erro ao remover estado de {}", summonerName, e);
        }
    }

    /**
     * ‚úÖ Renova TTL do estado do jogador
     * 
     * √ötil para manter estado ativo durante sess√£o longa.
     * 
     * @param summonerName Nome do jogador
     * @return true se conseguiu renovar, false caso contr√°rio
     */
    public boolean renewPlayerState(String summonerName) {
        String key = STATE_PREFIX + summonerName;

        try {
            Boolean renewed = redisTemplate.expire(key, STATE_TTL);

            if (Boolean.TRUE.equals(renewed)) {
                log.debug("‚ôªÔ∏è [PlayerState] TTL renovado para {}", summonerName);
                return true;
            }

            return false;

        } catch (Exception e) {
            log.error("‚ùå [PlayerState] Erro ao renovar estado de {}", summonerName, e);
            return false;
        }
    }

    /**
     * ‚úÖ Obt√©m TTL do estado do jogador (em segundos)
     * 
     * @param summonerName Nome do jogador
     * @return TTL em segundos, ou -1 se n√£o h√° estado
     */
    public long getPlayerStateTtl(String summonerName) {
        String key = STATE_PREFIX + summonerName;

        try {
            Long ttl = redisTemplate.getExpire(key);
            return ttl != null ? ttl : -1;

        } catch (Exception e) {
            log.error("‚ùå [PlayerState] Erro ao obter TTL de {}", summonerName, e);
            return -1;
        }
    }

    /**
     * ‚úÖ Realiza transi√ß√£o de estado com retry autom√°tico
     * 
     * Tenta m√∫ltiplas vezes se falhar por lock ocupado.
     * 
     * @param summonerName Nome do jogador
     * @param newState     Novo estado
     * @param maxRetries   N√∫mero m√°ximo de tentativas
     * @param retryDelayMs Delay entre tentativas (ms)
     * @return true se conseguiu, false se falhou ap√≥s todas as tentativas
     */
    public boolean setPlayerStateWithRetry(String summonerName, PlayerState newState,
            int maxRetries, long retryDelayMs) {
        for (int attempt = 1; attempt <= maxRetries; attempt++) {
            if (setPlayerState(summonerName, newState)) {
                return true;
            }

            if (attempt < maxRetries) {
                log.debug("‚è≥ [PlayerState] Tentativa {}/{} falhou, aguardando {}ms",
                        attempt, maxRetries, retryDelayMs);
                try {
                    Thread.sleep(retryDelayMs);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    return false;
                }
            }
        }

        log.error("‚ùå [PlayerState] Falha ap√≥s {} tentativas para {}: {}",
                maxRetries, summonerName, newState);
        return false;
    }
}
