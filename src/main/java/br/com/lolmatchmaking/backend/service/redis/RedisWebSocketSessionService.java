package br.com.lolmatchmaking.backend.service.redis;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.redisson.api.RBucket;
import org.redisson.api.RMap;
import org.redisson.api.RedissonClient;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.TimeUnit;

/**
 * üöÄ SERVI√áO REDIS - SESS√ïES WEBSOCKET
 * 
 * Gerencia mapeamentos de sess√µes WebSocket em Redis para sobreviver a
 * rein√≠cios do backend.
 * 
 * PROBLEMA RESOLVIDO:
 * - Backend reinicia ‚Üí ConcurrentHashMaps zerados ‚Üí Electrons reconectam mas
 * backend n√£o sabe "quem √© quem"
 * - Eventos n√£o chegam aos jogadores corretos (ex: "draft_confirmed" para
 * Player5)
 * 
 * SOLU√á√ÉO:
 * - Armazena mapeamentos em Redis: sessionId ‚Üî summonerName
 * - Metadata de conex√£o: IP, connectedAt, lastHeartbeat
 * - Backend restaura estado instantaneamente ap√≥s rein√≠cio
 * - Electrons reconectam e eventos chegam corretamente
 * 
 * CHAVES REDIS:
 * - ws:session:{sessionId} ‚Üí summonerName (String)
 * - ws:player:{summonerName} ‚Üí sessionId (String) [lookup reverso]
 * - ws:client:{sessionId} ‚Üí ClientInfo (Hash: ip, connectedAt, lastActivity,
 * userAgent)
 * 
 * TTL: 6 horas (conex√µes WebSocket normalmente < 2h)
 * 
 * OPERA√á√ïES:
 * - registerSession: Registra novo WebSocket (bidirecionalpairMapping)
 * - getSessionBySummoner: Busca sessionId por summonerName (enviar eventos)
 * - getSummonerBySession: Busca summonerName por sessionId (identifica√ß√£o)
 * - updateHeartbeat: Atualiza lastActivity (mant√©m sess√£o viva)
 * - removeSession: Remove sess√£o (disconnect)
 * - getAllActiveSessions: Lista todas as sess√µes ativas
 * 
 * @author LoL Matchmaking Backend Team
 * @since Migra√ß√£o Redis WebSockets
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class RedisWebSocketSessionService {

    private final RedissonClient redisson;
    private final ObjectMapper objectMapper;

    // ‚úÖ CORRIGIDO: TTL de 1h30min (dura√ß√£o t√≠pica de sess√£o)
    // CR√çTICO: Sess√£o n√£o deve persistir al√©m da necessidade real
    // Sess√£o t√≠pica: < 1h, margem 30min = 1h30min total
    // Heartbeat estende TTL continuamente enquanto ativo
    // Monitor detecta desconex√£o em 30s (n√£o espera TTL)
    private static final long SESSION_TTL_SECONDS = 5400; // 1h30min (90min)

    // Prefixos de chaves
    // ‚úÖ REMOVIDO: Chaves antigas n√£o s√£o mais usadas - tudo via ws:client_info:
    // private static final String SESSION_KEY_PREFIX = "ws:session:";
    // private static final String PLAYER_KEY_PREFIX = "ws:player:";
    // private static final String CLIENT_KEY_PREFIX = "ws:client:";

    // ‚úÖ NOVO: Unifica√ß√£o completa - uma chave por jogador com todos os dados
    private static final String CLIENT_INFO_UNIFIED_PREFIX = "ws:client_info:"; // summonerName ‚Üí ClientInfo (TODOS OS
                                                                                // DADOS)
    private static final String SESSION_MAPPING_PREFIX = "ws:session_mapping:"; // randomSessionId ‚Üí customSessionId
    private static final String CUSTOM_SESSION_MAPPING_PREFIX = "ws:custom_session_mapping:"; // customSessionId ‚Üí
                                                                                              // randomSessionId

    /**
     * ‚úÖ NOVO: Informa√ß√µes completas do cliente WebSocket (unificado)
     * Agora inclui TODOS os dados do jogador em uma √∫nica estrutura
     */
    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class ClientInfo {
        // Dados de sess√£o
        private String sessionId;
        private String summonerName;
        private String ipAddress;
        private Instant connectedAt;
        private Instant lastActivity;
        private String userAgent;

        // ‚úÖ NOVO: Dados do jogador
        private String puuid;
        private String summonerId;
        private Integer profileIconId;
        private Integer summonerLevel;
        private String gameName;
        private String tagLine;
        private String tier;
        private String division;

        // ‚úÖ NOVO: CustomSessionId (imut√°vel, baseado no jogador)
        private String customSessionId;
    }

    /**
     * Registra nova sess√£o WebSocket com bidirectional mapping.
     * 
     * Cria 3 chaves Redis:
     * 1. ws:session:{sessionId} ‚Üí summonerName (enviar eventos por sessionId)
     * 2. ws:player:{summonerName} ‚Üí sessionId (buscar sess√£o por player)
     * 3. ws:client:{sessionId} ‚Üí ClientInfo (metadata completa)
     * 
     * @param sessionId       ID √∫nico da sess√£o WebSocket (random)
     * @param summonerName    Nome do invocador
     * @param ipAddress       IP do cliente
     * @param userAgent       User-Agent do navegador/Electron
     * @param customSessionId CustomSessionId (opcional, adicionado depois via
     *                        updatePlayerData se n√£o fornecido)
     * @return true se registrou com sucesso, false se j√° existia
     */
    public boolean registerSession(String sessionId, String summonerName, String ipAddress, String userAgent) {
        return registerSession(sessionId, summonerName, ipAddress, userAgent, null);
    }

    /**
     * ‚úÖ NOVO: Sobrecarga com customSessionId
     */
    public boolean registerSession(String sessionId, String summonerName, String ipAddress, String userAgent,
            String customSessionId) {
        try {
            if (sessionId == null || sessionId.isBlank() || summonerName == null || summonerName.isBlank()) {
                log.warn(
                        "‚ö†Ô∏è [RedisWS] Tentativa de registrar sess√£o com dados inv√°lidos: sessionId={}, summonerName={}",
                        sessionId, summonerName);
                return false;
            }

            String normalizedSummoner = normalizeSummonerName(summonerName);

            // ‚úÖ CR√çTICO: VERIFICAR E REMOVER SESS√ïES DUPLICADAS ANTES DE REGISTRAR
            // 1. Verificar se j√° existe sess√£o para este summoner via ws:client_info:
            String clientInfoKey = CLIENT_INFO_UNIFIED_PREFIX + normalizedSummoner;
            RBucket<ClientInfo> existingClientInfoBucket = redisson.getBucket(clientInfoKey);
            ClientInfo existingClientInfo = existingClientInfoBucket.get();

            if (existingClientInfo != null && existingClientInfo.getSessionId() != null
                    && !existingClientInfo.getSessionId().equals(sessionId)) {

                String oldSessionId = existingClientInfo.getSessionId();
                String oldCustomSessionId = existingClientInfo.getCustomSessionId();

                log.warn("üîÑ [RedisWS] RECONEX√ÉO DETECTADA! Jogador {} j√° tem sess√£o ativa: {} (custom: {})",
                        normalizedSummoner, oldSessionId, oldCustomSessionId);

                // ‚úÖ CR√çTICO: ATUALIZAR sessionId mantendo todos os dados do jogador
                // Princ√≠pio: Backend mant√©m UMA entrada por jogador, apenas atualiza o
                // sessionId
                log.info("üîÑ [RedisWS] ATUALIZANDO sessionId: {} ‚Üí {} (mantendo player_info)",
                        oldSessionId, sessionId);

                // Remover APENAS os mapeamentos antigos (n√£o os dados do jogador)
                // 1. Remover mapeamento customSessionId ‚Üí randomSessionId antigo (se existir)
                if (oldCustomSessionId != null && !oldCustomSessionId.isBlank()) {
                    String customMappingKey = CUSTOM_SESSION_MAPPING_PREFIX + oldCustomSessionId;
                    RBucket<String> customMappingBucket = redisson.getBucket(customMappingKey);
                    customMappingBucket.delete();
                    log.debug("üóëÔ∏è [RedisWS] Mapeamento customSessionId removido: {}", customMappingKey);
                }

                // 2. Remover mapeamento randomSessionId ‚Üí customSessionId antigo (se existir)
                String sessionMappingKey = SESSION_MAPPING_PREFIX + oldSessionId;
                RBucket<String> sessionMappingBucket = redisson.getBucket(sessionMappingKey);
                sessionMappingBucket.delete();
                log.debug("üóëÔ∏è [RedisWS] Mapeamento sessionId removido: {}", sessionMappingKey);

                // ‚úÖ Atualizar ClientInfo com novo sessionId mantendo TODOS os dados do jogador
                ClientInfo updatedClientInfo = ClientInfo.builder()
                        .sessionId(sessionId) // ‚Üê NOVO sessionId
                        .summonerName(existingClientInfo.getSummonerName()) // ‚Üê MANTER
                        .ipAddress(ipAddress) // ‚Üê ATUALIZAR (pode ter mudado)
                        .connectedAt(existingClientInfo.getConnectedAt()) // ‚Üê MANTER (primeira conex√£o)
                        .lastActivity(Instant.now()) // ‚Üê ATUALIZAR
                        .userAgent(userAgent) // ‚Üê ATUALIZAR (pode ter mudado)
                        .puuid(existingClientInfo.getPuuid()) // ‚Üê MANTER
                        .summonerId(existingClientInfo.getSummonerId()) // ‚Üê MANTER
                        .profileIconId(existingClientInfo.getProfileIconId()) // ‚Üê MANTER
                        .summonerLevel(existingClientInfo.getSummonerLevel()) // ‚Üê MANTER
                        .gameName(existingClientInfo.getGameName()) // ‚Üê MANTER
                        .tagLine(existingClientInfo.getTagLine()) // ‚Üê MANTER
                        .tier(existingClientInfo.getTier()) // ‚Üê MANTER
                        .division(existingClientInfo.getDivision()) // ‚Üê MANTER
                        .customSessionId(
                                customSessionId != null ? customSessionId : existingClientInfo.getCustomSessionId()) // ‚Üê
                                                                                                                     // ATUALIZAR
                                                                                                                     // se
                                                                                                                     // fornecido
                        .build();

                // Salvar ClientInfo atualizado
                RBucket<ClientInfo> clientInfoBucket = redisson.getBucket(clientInfoKey);
                clientInfoBucket.set(updatedClientInfo, Duration.ofHours(1));

                log.info("‚úÖ [RedisWS] ClientInfo ATUALIZADO: {} ‚Üí novo sessionId={}, dados do jogador PRESERVADOS",
                        normalizedSummoner, sessionId);

                // Retornar true indicando que foi uma atualiza√ß√£o (n√£o uma nova sess√£o)
                return true;
            }

            // 2. Verificar se este sessionId j√° est√° registrado para outro jogador
            // Buscar em todas as sess√µes para ver se j√° existe
            // (TODO: Otimizar isso com um √≠ndice reverso se necess√°rio)

            // ‚úÖ REGISTRAR: Nova sess√£o (primeira vez ou sem ClientInfo anterior)
            // ‚úÖ NOVO: Usar apenas uma chave unificada ws:client_info:{summonerName}

            ClientInfo clientInfo = ClientInfo.builder()
                    .sessionId(sessionId)
                    .summonerName(normalizedSummoner)
                    .ipAddress(ipAddress)
                    .connectedAt(Instant.now())
                    .lastActivity(Instant.now())
                    .userAgent(userAgent)
                    .customSessionId(customSessionId)
                    // Nota: puuid, summonerId, etc. ser√£o atualizados depois via updatePlayerData()
                    .build();

            // ‚úÖ CR√çTICO: Usar summonerName na chave (n√£o sessionId)
            RBucket<ClientInfo> clientInfoBucket = redisson.getBucket(clientInfoKey);
            clientInfoBucket.set(clientInfo, Duration.ofHours(1));

            log.info("‚úÖ [RedisWS] Sess√£o registrada: {} ‚Üí {} (IP: {})",
                    sessionId, normalizedSummoner, ipAddress);

            return true;

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao registrar sess√£o: sessionId={}, summonerName={}",
                    sessionId, summonerName, e);
            return false;
        }
    }

    /**
     * ‚úÖ NOVO: Atualiza dados completos do jogador na sess√£o.
     * Chamado ap√≥s electron_identify para incluir puuid, profileIconId, etc.
     * 
     * @param summonerName    Nome do invocador
     * @param puuid           PUUID do jogador
     * @param summonerId      Summoner ID
     * @param profileIconId   ID do √≠cone de perfil
     * @param summonerLevel   N√≠vel do invocador
     * @param gameName        Game Name (nome do jogador)
     * @param tagLine         Tag Line
     * @param customSessionId CustomSessionId (imut√°vel baseado no jogador)
     */
    public boolean updatePlayerData(String summonerName, String puuid, String summonerId,
            Integer profileIconId, Integer summonerLevel,
            String gameName, String tagLine, String customSessionId) {
        try {
            if (summonerName == null || summonerName.isBlank()) {
                return false;
            }

            String normalizedSummoner = normalizeSummonerName(summonerName);
            String clientInfoKey = CLIENT_INFO_UNIFIED_PREFIX + normalizedSummoner;
            RBucket<ClientInfo> clientInfoBucket = redisson.getBucket(clientInfoKey);

            ClientInfo existingClientInfo = clientInfoBucket.get();
            if (existingClientInfo == null) {
                log.warn("‚ö†Ô∏è [RedisWS] Tentativa de atualizar dados de sess√£o inexistente: {}", normalizedSummoner);
                return false;
            }

            // Atualizar dados do jogador mantendo dados de sess√£o
            ClientInfo updatedClientInfo = ClientInfo.builder()
                    .sessionId(existingClientInfo.getSessionId())
                    .summonerName(existingClientInfo.getSummonerName())
                    .ipAddress(existingClientInfo.getIpAddress())
                    .connectedAt(existingClientInfo.getConnectedAt())
                    .lastActivity(existingClientInfo.getLastActivity())
                    .userAgent(existingClientInfo.getUserAgent())
                    .puuid(puuid)
                    .summonerId(summonerId)
                    .profileIconId(profileIconId)
                    .summonerLevel(summonerLevel)
                    .gameName(gameName)
                    .tagLine(tagLine)
                    .customSessionId(
                            customSessionId != null ? customSessionId : existingClientInfo.getCustomSessionId())
                    .build();

            clientInfoBucket.set(updatedClientInfo, Duration.ofHours(1));
            log.info("‚úÖ [RedisWS] Dados do jogador atualizados: {} (PUUID: {}...)",
                    normalizedSummoner, puuid != null ? puuid.substring(0, Math.min(8, puuid.length())) : "N/A");

            return true;

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao atualizar dados do jogador: {}", summonerName, e);
            return false;
        }
    }

    /**
     * Busca sessionId por summonerName.
     * CR√çTICO para enviar eventos ao jogador correto.
     * 
     * Exemplo de uso:
     * - Backend precisa enviar "draft_confirmed" para Player5
     * - Busca: sessionId = getSessionBySummoner("Player5")
     * - Envia evento via WebSocket usando sessionId
     * 
     * @param summonerName Nome do invocador
     * @return Optional com sessionId se encontrado, empty se offline
     */
    public Optional<String> getSessionBySummoner(String summonerName) {
        try {
            if (summonerName == null || summonerName.isBlank()) {
                return Optional.empty();
            }

            String normalizedSummoner = normalizeSummonerName(summonerName);

            // ‚úÖ CORRE√á√ÉO: Usar apenas chave unificada ws:client_info:{summonerName}
            String clientInfoKey = "ws:client_info:" + normalizedSummoner;

            RBucket<ClientInfo> clientInfoBucket = redisson.getBucket(clientInfoKey);
            ClientInfo clientInfo = clientInfoBucket.get();

            if (clientInfo != null && clientInfo.getSessionId() != null) {
                // ‚úÖ CR√çTICO: Sempre retornar randomSessionId (j√° est√° em clientInfo.sessionId)
                // customSessionId √© usado apenas para lock/identifica√ß√£o, N√ÉO para envio
                // WebSocket
                String randomSessionId = clientInfo.getSessionId();

                // Log detalhado incluindo customSessionId se dispon√≠vel
                String customSessionIdForLog = clientInfo.getCustomSessionId();
                if (customSessionIdForLog != null) {
                    log.debug("üîç [RedisWS] Sess√£o encontrada: {} ‚Üí randomSessionId={}, customSessionId={}",
                            normalizedSummoner, randomSessionId, customSessionIdForLog);
                } else {
                    log.debug("üîç [RedisWS] Sess√£o encontrada: {} ‚Üí randomSessionId={}",
                            normalizedSummoner, randomSessionId);
                }

                return Optional.of(randomSessionId);
            }

            log.warn("‚ùå [RedisWS] Sess√£o N√ÉO encontrada para: original=[{}], normalized=[{}], key=[{}]",
                    summonerName, normalizedSummoner, clientInfoKey);
            return Optional.empty();

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao buscar sess√£o por summoner: {}", summonerName, e);
            return Optional.empty();
        }
    }

    /**
     * Busca summonerName por sessionId.
     * Usado para identificar quem enviou uma mensagem WebSocket.
     * 
     * @param sessionId ID da sess√£o WebSocket
     * @return Optional com summonerName se encontrado, empty se n√£o identificado
     */
    public Optional<String> getSummonerBySession(String sessionId) {
        try {
            if (sessionId == null || sessionId.isBlank()) {
                return Optional.empty();
            }

            // ‚úÖ CORRE√á√ÉO: Verificar se Redisson est√° ativo (evita erro durante shutdown)
            if (redisson.isShutdown() || redisson.isShuttingDown()) {
                log.debug("‚ö†Ô∏è [RedisWS] Redisson est√° desligado - retornando empty para sessionId: {}", sessionId);
                return Optional.empty();
            }

            // ‚úÖ CORRE√á√ÉO: Buscar em todas as chaves ws:client_info:* para encontrar o
            // sessionId
            Iterable<String> clientInfoKeys = redisson.getKeys().getKeysByPattern("ws:client_info:*");

            for (String clientInfoKey : clientInfoKeys) {
                RBucket<ClientInfo> clientInfoBucket = redisson.getBucket(clientInfoKey);
                ClientInfo clientInfo = clientInfoBucket.get();

                if (clientInfo != null && sessionId.equals(clientInfo.getSessionId())) {
                    String summonerName = clientInfo.getSummonerName();
                    log.debug("üîç [RedisWS] Summoner encontrado: {} ‚Üí {}", sessionId, summonerName);
                    return Optional.of(summonerName);
                }
            }

            log.debug("‚ùå [RedisWS] Summoner N√ÉO encontrado para sess√£o: {}", sessionId);
            return Optional.empty();

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao buscar summoner por sess√£o: {}", sessionId, e);
            return Optional.empty();
        }
    }

    /**
     * ‚úÖ NOVO: Limpa chaves corrompidas por ClassLoader conflicts
     */
    private void cleanupCorruptedKeys(String sessionId) {
        try {
            // ‚úÖ CORRE√á√ÉO: Usar summonerName em vez de sessionId
            String summonerName = getSummonerBySession(sessionId).orElse(null);
            if (summonerName == null) {
                return; // N√£o h√° nada para limpar
            }

            String clientInfoKey = "ws:client_info:" + summonerName;
            RBucket<Object> bucket = redisson.getBucket(clientInfoKey);

            // Tentar acessar para detectar ClassCastException
            try {
                Object data = bucket.get();
                if (data != null && !(data instanceof ClientInfo)) {
                    log.warn("‚ö†Ô∏è [RedisWS] Dados corrompidos detectados - limpando: {}", clientInfoKey);
                    bucket.delete();
                }
            } catch (ClassCastException e) {
                log.warn("‚ö†Ô∏è [RedisWS] ClassCastException - limpando chave corrompida: {}", clientInfoKey);
                bucket.delete();
            }

        } catch (Exception e) {
            log.debug("‚ö†Ô∏è [RedisWS] Erro durante limpeza de chaves corrompidas: {}", e.getMessage());
        }
    }

    /**
     * Busca metadata completa da conex√£o.
     * 
     * @param sessionId ID da sess√£o WebSocket
     * @return Optional com ClientInfo se encontrado, empty se n√£o existe
     */
    public Optional<ClientInfo> getClientInfo(String sessionId) {
        try {
            if (sessionId == null || sessionId.isBlank()) {
                return Optional.empty();
            }

            // ‚úÖ CORRE√á√ÉO: Verificar se Redisson est√° ativo (evita erro durante shutdown)
            if (redisson.isShutdown() || redisson.isShuttingDown()) {
                log.debug("‚ö†Ô∏è [RedisWS] Redisson est√° desligado - retornando empty para sessionId: {}", sessionId);
                return Optional.empty();
            }

            // ‚úÖ CORRE√á√ÉO: Buscar por sessionId primeiro, depois usar summonerName
            String summonerName = getSummonerBySession(sessionId).orElse(null);
            if (summonerName == null) {
                return Optional.empty();
            }

            String clientInfoKey = "ws:client_info:" + summonerName;
            RBucket<ClientInfo> clientInfoBucket = redisson.getBucket(clientInfoKey);

            try {
                ClientInfo clientInfo = clientInfoBucket.get();
                if (clientInfo != null) {
                    return Optional.of(clientInfo);
                }
            } catch (ClassCastException e) {
                // ‚úÖ CORRE√á√ÉO CR√çTICA: ClassLoader conflict (Spring Boot DevTools)
                log.warn(
                        "‚ö†Ô∏è [RedisWS] ClassCastException detectada (DevTools ClassLoader conflict) - limpando chave corrompida: {}",
                        clientInfoKey);
                try {
                    // Limpar chave corrompida
                    clientInfoBucket.delete();
                    log.info("‚úÖ [RedisWS] Chave corrompida removida: {}", clientInfoKey);
                } catch (Exception cleanupError) {
                    log.warn("‚ö†Ô∏è [RedisWS] Erro ao limpar chave corrompida: {}", cleanupError.getMessage());
                }
            }

            // ‚úÖ REMOVIDO: Chaves antigas n√£o s√£o mais usadas - tudo via ws:client_info:
            // N√£o h√° fallback necess√°rio, pois todas as sess√µes s√£o migradas
            log.debug("‚ö†Ô∏è [RedisWS] ClientInfo n√£o encontrado e n√£o h√° fallback: {}", sessionId);
            return Optional.empty();

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao buscar client info: {}", sessionId, e);
            return Optional.empty();
        }
    }

    /**
     * Atualiza timestamp de √∫ltima atividade (heartbeat).
     * Mant√©m sess√£o viva e extende TTL.
     * 
     * @param sessionId ID da sess√£o WebSocket
     * @return true se atualizou com sucesso, false se sess√£o n√£o existe
     */
    public boolean updateHeartbeat(String sessionId) {
        try {
            if (sessionId == null || sessionId.isBlank()) {
                return false;
            }

            // ‚úÖ NOVO: Buscar ClientInfo via sessionId
            // Primeiro, precisamos encontrar o summonerName pelo sessionId
            Optional<String> summonerOpt = getSummonerBySession(sessionId);
            if (!summonerOpt.isPresent()) {
                log.warn("‚ö†Ô∏è [RedisWS] Tentativa de heartbeat em sess√£o inexistente: {}", sessionId);
                return false;
            }

            String summonerName = summonerOpt.get();
            String clientInfoKey = CLIENT_INFO_UNIFIED_PREFIX + summonerName;
            RBucket<ClientInfo> clientInfoBucket = redisson.getBucket(clientInfoKey);

            ClientInfo clientInfo = clientInfoBucket.get();
            if (clientInfo == null) {
                log.warn("‚ö†Ô∏è [RedisWS] ClientInfo n√£o encontrado para heartbeat: {}", sessionId);
                return false;
            }

            // Atualizar lastActivity
            clientInfo.setLastActivity(Instant.now());
            clientInfoBucket.set(clientInfo, Duration.ofHours(1));

            log.debug("üíì [RedisWS] Heartbeat atualizado: {} (summoner: {})", sessionId, summonerName);
            return true;

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao atualizar heartbeat: {}", sessionId, e);
            return false;
        }
    }

    /**
     * Remove sess√£o WebSocket (disconnect).
     * Remove todas as 3 chaves Redis associadas.
     * 
     * @param sessionId ID da sess√£o WebSocket
     * @return true se removeu com sucesso, false se n√£o existia
     */
    public boolean removeSession(String sessionId) {
        try {
            if (sessionId == null || sessionId.isBlank()) {
                return false;
            }

            // Buscar summonerName antes de deletar
            Optional<String> summonerOpt = getSummonerBySession(sessionId);

            // ‚úÖ CORRE√á√ÉO: Deletar apenas chave unificada
            if (summonerOpt.isPresent()) {
                String summonerName = summonerOpt.get();
                // Deletar apenas client_info usando summonerName
                redisson.getBucket("ws:client_info:" + summonerName).delete();
                log.info("üóëÔ∏è [RedisWS] Sess√£o removida: {} ({})", sessionId, summonerName);
            } else {
                log.info("üóëÔ∏è [RedisWS] Sess√£o removida: {} (summoner desconhecido)", sessionId);
            }

            return true;

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao remover sess√£o: {}", sessionId, e);
            return false;
        }
    }

    /**
     * ‚úÖ NOVO: Lista todas as informa√ß√µes de clientes ativos.
     * √ötil para confirma√ß√£o de identidade.
     * 
     * @return Map de sessionId ‚Üí ClientInfo
     */
    public Map<String, Object> getAllClientInfo() {
        try {
            Map<String, Object> allClients = new HashMap<>();

            // ‚úÖ CORRE√á√ÉO: Buscar todas as chaves ws:client_info:*
            Iterable<String> keys = redisson.getKeys().getKeysByPattern("ws:client_info:*");

            for (String key : keys) {
                RBucket<ClientInfo> clientInfoBucket = redisson.getBucket(key);
                ClientInfo clientInfo = clientInfoBucket.get();

                if (clientInfo != null && clientInfo.getSessionId() != null) {
                    // Criar Map com informa√ß√µes do cliente
                    Map<String, Object> clientData = new HashMap<>();
                    clientData.put("summonerName", clientInfo.getSummonerName());
                    clientData.put("ip", clientInfo.getIpAddress());
                    clientData.put("connectedAt", clientInfo.getConnectedAt());
                    clientData.put("lastActivity", clientInfo.getLastActivity());
                    clientData.put("userAgent", clientInfo.getUserAgent());

                    allClients.put(clientInfo.getSessionId(), clientData);
                }
            }

            log.debug("‚úÖ [RedisWSSession] {} clientes ativos listados", allClients.size());
            return allClients;

        } catch (Exception e) {
            log.error("‚ùå [RedisWSSession] Erro ao listar todos os clientes", e);
            return new HashMap<>();
        }
    }

    /**
     * Lista todas as sess√µes ativas.
     * √ötil para broadcast e monitoramento.
     * 
     * @return Map de sessionId ‚Üí summonerName
     */
    public Map<String, String> getAllActiveSessions() {
        try {
            Map<String, String> sessions = new HashMap<>();

            // ‚úÖ CORRE√á√ÉO: Buscar todas as chaves ws:client_info:*
            Iterable<String> keys = redisson.getKeys().getKeysByPattern("ws:client_info:*");

            for (String key : keys) {
                RBucket<ClientInfo> bucket = redisson.getBucket(key);
                ClientInfo clientInfo = bucket.get();

                if (clientInfo != null && clientInfo.getSessionId() != null) {
                    sessions.put(clientInfo.getSessionId(), clientInfo.getSummonerName());
                }
            }

            log.debug("üìä [RedisWS] Sess√µes ativas: {}", sessions.size());
            return sessions;

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao listar sess√µes ativas", e);
            return Collections.emptyMap();
        }
    }

    /**
     * Verifica se sess√£o existe e est√° ativa.
     * 
     * @param sessionId ID da sess√£o WebSocket
     * @return true se sess√£o existe, false caso contr√°rio
     */
    public boolean hasSession(String sessionId) {
        try {
            if (sessionId == null || sessionId.isBlank()) {
                return false;
            }

            // ‚úÖ CORRE√á√ÉO: Verificar se sessionId existe em alguma chave ws:client_info:*
            return getSummonerBySession(sessionId).isPresent();

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao verificar exist√™ncia de sess√£o: {}", sessionId, e);
            return false;
        }
    }

    /**
     * Verifica se jogador est√° online (tem sess√£o ativa).
     * 
     * @param summonerName Nome do invocador
     * @return true se jogador est√° online, false caso contr√°rio
     */
    public boolean isPlayerOnline(String summonerName) {
        try {
            if (summonerName == null || summonerName.isBlank()) {
                return false;
            }

            String normalizedSummoner = normalizeSummonerName(summonerName);
            // ‚úÖ CORRE√á√ÉO: Verificar se jogador tem chave ws:client_info:
            String clientInfoKey = "ws:client_info:" + normalizedSummoner;
            return redisson.getBucket(clientInfoKey).isExists();

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao verificar se jogador est√° online: {}", summonerName, e);
            return false;
        }
    }

    /**
     * ‚úÖ REMOVIDO: storePlayerInfo deprecated - use updatePlayerData em vez disso
     * Dados do jogador s√£o agora armazenados diretamente no ClientInfo via
     * ws:client_info:{summonerName}
     */

    /**
     * ‚úÖ REMOVIDO: getPlayerInfo deprecated - use getClientInfo em vez disso
     */

    /**
     * ‚úÖ REMOVIDO: removePlayerInfo deprecated - dados s√£o removidos automaticamente
     * pelo removeSession
     */

    /**
     * Normaliza nome do invocador (lowercase, trim).
     * Garante consist√™ncia nos lookups.
     * 
     * @param summonerName Nome do invocador
     * @return Nome normalizado
     */
    private String normalizeSummonerName(String summonerName) {
        if (summonerName == null) {
            return "";
        }
        return summonerName.trim().toLowerCase();
    }

    /**
     * ‚úÖ NOVO: Atualiza timestamp da √∫ltima confirma√ß√£o de identidade
     */
    public void updateIdentityConfirmation(String sessionId) {
        try {
            // ‚úÖ CORRE√á√ÉO: Usar summonerName em vez de sessionId
            String summonerName = getSummonerBySession(sessionId).orElse(null);
            if (summonerName == null) {
                return;
            }

            String clientInfoKey = "ws:client_info:" + summonerName;
            RBucket<ClientInfo> clientBucket = redisson.getBucket(clientInfoKey);

            Optional<ClientInfo> clientInfoOpt = Optional.ofNullable(clientBucket.get());
            if (clientInfoOpt.isPresent()) {
                ClientInfo clientInfo = clientInfoOpt.get();

                // Atualizar timestamp
                ClientInfo updatedClientInfo = ClientInfo.builder()
                        .sessionId(clientInfo.getSessionId())
                        .summonerName(clientInfo.getSummonerName())
                        .ipAddress(clientInfo.getIpAddress())
                        .connectedAt(clientInfo.getConnectedAt())
                        .lastActivity(Instant.now()) // lastActivity atualizado
                        .userAgent(clientInfo.getUserAgent())
                        .build();

                clientBucket.set(updatedClientInfo, SESSION_TTL_SECONDS, TimeUnit.SECONDS);
                log.debug("‚úÖ [RedisWSSession] Timestamp de confirma√ß√£o atualizado: {}", sessionId);
            }

        } catch (Exception e) {
            log.error("‚ùå [RedisWSSession] Erro ao atualizar timestamp de confirma√ß√£o: {}", sessionId, e);
        }
    }

    /**
     * ‚úÖ NOVO: Armazena mapeamento sessionId ‚Üî customSessionId (bidirecional)
     * 
     * Cria 2 chaves:
     * 1. ws:session_mapping:{randomSessionId} ‚Üí customSessionId
     * 2. ws:custom_session_mapping:{customSessionId} ‚Üí randomSessionId
     */
    public boolean storeSessionMapping(String randomSessionId, String customSessionId) {
        try {
            if (randomSessionId == null || customSessionId == null) {
                log.warn("‚ö†Ô∏è [RedisWS] Dados inv√°lidos para storeSessionMapping");
                return false;
            }

            // 1. Forward: randomSessionId ‚Üí customSessionId
            String forwardKey = SESSION_MAPPING_PREFIX + randomSessionId;
            RBucket<String> forwardBucket = redisson.getBucket(forwardKey);
            forwardBucket.set(customSessionId, SESSION_TTL_SECONDS, TimeUnit.SECONDS);

            // 2. Reverse: customSessionId ‚Üí randomSessionId
            String reverseKey = CUSTOM_SESSION_MAPPING_PREFIX + customSessionId;
            RBucket<String> reverseBucket = redisson.getBucket(reverseKey);
            reverseBucket.set(randomSessionId, SESSION_TTL_SECONDS, TimeUnit.SECONDS);

            log.info("‚úÖ [RedisWS] Mapeamento bidirecional armazenado: {} ‚Üî {}", randomSessionId, customSessionId);
            return true;

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao armazenar mapeamento: {} ‚Üí {}", randomSessionId, customSessionId, e);
            return false;
        }
    }

    /**
     * ‚úÖ NOVO: Recupera customSessionId do mapeamento
     */
    public Optional<String> getCustomSessionId(String randomSessionId) {
        try {
            if (randomSessionId == null) {
                return Optional.empty();
            }

            String key = SESSION_MAPPING_PREFIX + randomSessionId;
            RBucket<String> bucket = redisson.getBucket(key);
            String customSessionId = bucket.get();

            if (customSessionId != null) {
                log.debug("‚úÖ [RedisWS] CustomSessionId recuperado: {} ‚Üí {}", randomSessionId, customSessionId);
                return Optional.of(customSessionId);
            } else {
                log.debug("‚ö†Ô∏è [RedisWS] Mapeamento n√£o encontrado para: {}", randomSessionId);
                return Optional.empty();
            }

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao recuperar mapeamento: {}", randomSessionId, e);
            return Optional.empty();
        }
    }

    /**
     * ‚úÖ NOVO: Limpa mappings antigos deste customSessionId
     * Remove mappings bidirecionais anteriores quando o jogador reconecta
     * 
     * Limpa:
     * 1. ws:session_mapping:* ‚Üí customSessionId (mapeamento direto)
     * 2. ws:custom_session_mapping:{customSessionId} ‚Üí randomSessionId antigo
     * (mapeamento reverso)
     * 
     * Isso previne acumula√ß√£o de chaves quando o jogador reconecta
     */
    public void cleanupOldMappingsForPlayer(String customSessionId) {
        try {
            if (customSessionId == null || customSessionId.isBlank()) {
                return;
            }

            log.info("üßπ [RedisWS] Limpando mappings antigos para customSessionId: {}", customSessionId);

            int removedCount = 0;

            // 1. Limpar forward mappings (randomSessionId ‚Üí customSessionId)
            Iterable<String> forwardKeys = redisson.getKeys().getKeysByPattern(SESSION_MAPPING_PREFIX + "*");
            for (String forwardKey : forwardKeys) {
                try {
                    RBucket<String> bucket = redisson.getBucket(forwardKey);
                    String storedCustomSessionId = bucket.get();
                    if (customSessionId.equals(storedCustomSessionId)) {
                        bucket.delete();
                        removedCount++;
                        log.debug("üóëÔ∏è [RedisWS] Forward mapping antigo removido: {}", forwardKey);
                    }
                } catch (Exception e) {
                    log.debug("‚ö†Ô∏è [RedisWS] Erro ao processar forward key: {}", forwardKey);
                }
            }

            // 2. Limpar reverse mapping antigo (customSessionId ‚Üí randomSessionId antigo)
            String reverseKey = CUSTOM_SESSION_MAPPING_PREFIX + customSessionId;
            RBucket<String> reverseBucket = redisson.getBucket(reverseKey);
            if (reverseBucket.isExists()) {
                reverseBucket.delete();
                removedCount++;
                log.debug("üóëÔ∏è [RedisWS] Reverse mapping antigo removido: {}", reverseKey);
            }

            if (removedCount > 0) {
                log.info("‚úÖ [RedisWS] {} mappings antigos removidos para customSessionId: {}", removedCount,
                        customSessionId);
            } else {
                log.debug("‚úÖ [RedisWS] Nenhum mapping antigo encontrado para customSessionId: {}", customSessionId);
            }

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao limpar mappings antigos para customSessionId: {}", customSessionId, e);
        }
    }

    /**
     * ‚úÖ NOVO: Busca randomSessionId atual por customSessionId (imut√°vel)
     * 
     * Usado quando o sistema conhece o customSessionId e precisa encontrar
     * a sess√£o WebSocket atual (randomSessionId) para enviar mensagens.
     * 
     * @param customSessionId CustomSessionId (ex: player_fzd_ratoso_fzd)
     * @return Optional com randomSessionId atual se encontrado, empty se offline
     */
    public Optional<String> getRandomSessionIdByCustom(String customSessionId) {
        try {
            if (customSessionId == null || customSessionId.isBlank()) {
                return Optional.empty();
            }

            // Buscar no √≠ndice reverso ws:custom_session_mapping:{customSessionId}
            String reverseKey = CUSTOM_SESSION_MAPPING_PREFIX + customSessionId;
            RBucket<String> reverseBucket = redisson.getBucket(reverseKey);
            String randomSessionId = reverseBucket.get();

            if (randomSessionId != null) {
                log.debug("üîç [RedisWS] RandomSessionId atual encontrado via customSessionId: {} ‚Üí {}",
                        customSessionId, randomSessionId);
                return Optional.of(randomSessionId);
            }

            log.debug("‚ùå [RedisWS] RandomSessionId N√ÉO encontrado para customSessionId: {}", customSessionId);
            return Optional.empty();

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao buscar randomSessionId por customSessionId: {}", customSessionId, e);
            return Optional.empty();
        }
    }

}
