package br.com.lolmatchmaking.backend.service.redis;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.redisson.api.RBucket;
import org.redisson.api.RMap;
import org.redisson.api.RedissonClient;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.TimeUnit;

/**
 * üöÄ SERVI√áO REDIS - SESS√ïES WEBSOCKET
 * 
 * Gerencia mapeamentos de sess√µes WebSocket em Redis para sobreviver a
 * rein√≠cios do backend.
 * 
 * PROBLEMA RESOLVIDO:
 * - Backend reinicia ‚Üí ConcurrentHashMaps zerados ‚Üí Electrons reconectam mas
 * backend n√£o sabe "quem √© quem"
 * - Eventos n√£o chegam aos jogadores corretos (ex: "draft_confirmed" para
 * Player5)
 * 
 * SOLU√á√ÉO:
 * - Armazena mapeamentos em Redis: sessionId ‚Üî summonerName
 * - Metadata de conex√£o: IP, connectedAt, lastHeartbeat
 * - Backend restaura estado instantaneamente ap√≥s rein√≠cio
 * - Electrons reconectam e eventos chegam corretamente
 * 
 * CHAVES REDIS:
 * - ws:session:{sessionId} ‚Üí summonerName (String)
 * - ws:player:{summonerName} ‚Üí sessionId (String) [lookup reverso]
 * - ws:client:{sessionId} ‚Üí ClientInfo (Hash: ip, connectedAt, lastActivity,
 * userAgent)
 * 
 * TTL: 6 horas (conex√µes WebSocket normalmente < 2h)
 * 
 * OPERA√á√ïES:
 * - registerSession: Registra novo WebSocket (bidirecionalpairMapping)
 * - getSessionBySummoner: Busca sessionId por summonerName (enviar eventos)
 * - getSummonerBySession: Busca summonerName por sessionId (identifica√ß√£o)
 * - updateHeartbeat: Atualiza lastActivity (mant√©m sess√£o viva)
 * - removeSession: Remove sess√£o (disconnect)
 * - getAllActiveSessions: Lista todas as sess√µes ativas
 * 
 * @author LoL Matchmaking Backend Team
 * @since Migra√ß√£o Redis WebSockets
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class RedisWebSocketSessionService {

    private final RedissonClient redisson;
    private final ObjectMapper objectMapper;

    // ‚úÖ CORRIGIDO: TTL de 1h30min (dura√ß√£o t√≠pica de sess√£o)
    // CR√çTICO: Sess√£o n√£o deve persistir al√©m da necessidade real
    // Sess√£o t√≠pica: < 1h, margem 30min = 1h30min total
    // Heartbeat estende TTL continuamente enquanto ativo
    // Monitor detecta desconex√£o em 30s (n√£o espera TTL)
    private static final long SESSION_TTL_SECONDS = 5400; // 1h30min (90min)

    // Prefixos de chaves
    private static final String SESSION_KEY_PREFIX = "ws:session:"; // sessionId ‚Üí summonerName
    private static final String PLAYER_KEY_PREFIX = "ws:player:"; // summonerName ‚Üí sessionId
    private static final String CLIENT_KEY_PREFIX = "ws:client:"; // sessionId ‚Üí ClientInfo
    private static final String PLAYER_INFO_KEY_PREFIX = "ws:player_info:"; // sessionId ‚Üí PlayerInfo (JSON)

    /**
     * Informa√ß√µes do cliente WebSocket
     */
    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class ClientInfo {
        private String sessionId;
        private String summonerName;
        private String ipAddress;
        private Instant connectedAt;
        private Instant lastActivity;
        private String userAgent;
    }

    /**
     * Registra nova sess√£o WebSocket com bidirectional mapping.
     * 
     * Cria 3 chaves Redis:
     * 1. ws:session:{sessionId} ‚Üí summonerName (enviar eventos por sessionId)
     * 2. ws:player:{summonerName} ‚Üí sessionId (buscar sess√£o por player)
     * 3. ws:client:{sessionId} ‚Üí ClientInfo (metadata completa)
     * 
     * @param sessionId    ID √∫nico da sess√£o WebSocket
     * @param summonerName Nome do invocador
     * @param ipAddress    IP do cliente
     * @param userAgent    User-Agent do navegador/Electron
     * @return true se registrou com sucesso, false se j√° existia
     */
    public boolean registerSession(String sessionId, String summonerName, String ipAddress, String userAgent) {
        try {
            if (sessionId == null || sessionId.isBlank() || summonerName == null || summonerName.isBlank()) {
                log.warn(
                        "‚ö†Ô∏è [RedisWS] Tentativa de registrar sess√£o com dados inv√°lidos: sessionId={}, summonerName={}",
                        sessionId, summonerName);
                return false;
            }

            String normalizedSummoner = normalizeSummonerName(summonerName);

            // ‚úÖ CR√çTICO: VERIFICAR E REMOVER SESS√ïES DUPLICADAS ANTES DE REGISTRAR
            // 1. Verificar se j√° existe sess√£o para este summoner
            RBucket<String> playerBucket = redisson.getBucket(PLAYER_KEY_PREFIX + normalizedSummoner);
            String existingSessionId = playerBucket.get();

            if (existingSessionId != null && !existingSessionId.equals(sessionId)) {
                log.warn("üö® [RedisWS] SESS√ÉO DUPLICADA DETECTADA! Jogador {} j√° tem sess√£o ativa: {}",
                        normalizedSummoner, existingSessionId);

                // ‚úÖ REMOVER: Sess√£o anterior completamente
                log.info("üóëÔ∏è [RedisWS] Removendo sess√£o anterior duplicada: {} (jogador: {})",
                        existingSessionId, normalizedSummoner);
                removeSession(existingSessionId);
            }

            // 2. Verificar se este sessionId j√° est√° registrado para outro jogador
            RBucket<String> sessionBucket = redisson.getBucket(SESSION_KEY_PREFIX + sessionId);
            String existingSummoner = sessionBucket.get();

            if (existingSummoner != null && !existingSummoner.equals(normalizedSummoner)) {
                log.warn("üö® [RedisWS] SESSIONID DUPLICADO! Sess√£o {} j√° registrada para outro jogador: {}",
                        sessionId, existingSummoner);

                // ‚úÖ REMOVER: Registro anterior desta sess√£o
                log.info("üóëÔ∏è [RedisWS] Removendo registro anterior da sess√£o {} (jogador anterior: {})",
                        sessionId, existingSummoner);
                removeSession(sessionId);
            }

            // ‚úÖ REGISTRAR: Agora que limpamos duplicatas, registrar nova sess√£o
            // ‚úÖ CORRE√á√ÉO: N√ÉO criar chaves ws:session: e ws:player: - s√£o redundantes!
            // A chave ws:client_info:{summonerName} j√° cont√©m todas as informa√ß√µes
            // necess√°rias

            // ‚úÖ CORRE√á√ÉO: Metadata completa usando formato unificado (String/Object)
            ClientInfo clientInfo = ClientInfo.builder()
                    .sessionId(sessionId)
                    .summonerName(normalizedSummoner)
                    .ipAddress(ipAddress)
                    .connectedAt(Instant.now())
                    .lastActivity(Instant.now())
                    .userAgent(userAgent)
                    .build();

            // ‚úÖ CORRE√á√ÉO: Usar summonerName em vez de sessionId na chave
            String clientInfoKey = "ws:client_info:" + normalizedSummoner;
            RBucket<ClientInfo> clientInfoBucket = redisson.getBucket(clientInfoKey);
            clientInfoBucket.set(clientInfo, Duration.ofHours(1));

            log.info("‚úÖ [RedisWS] Sess√£o registrada: {} ‚Üí {} (IP: {})",
                    sessionId, normalizedSummoner, ipAddress);

            return true;

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao registrar sess√£o: sessionId={}, summonerName={}",
                    sessionId, summonerName, e);
            return false;
        }
    }

    /**
     * Busca sessionId por summonerName.
     * CR√çTICO para enviar eventos ao jogador correto.
     * 
     * Exemplo de uso:
     * - Backend precisa enviar "draft_confirmed" para Player5
     * - Busca: sessionId = getSessionBySummoner("Player5")
     * - Envia evento via WebSocket usando sessionId
     * 
     * @param summonerName Nome do invocador
     * @return Optional com sessionId se encontrado, empty se offline
     */
    public Optional<String> getSessionBySummoner(String summonerName) {
        try {
            if (summonerName == null || summonerName.isBlank()) {
                return Optional.empty();
            }

            String normalizedSummoner = normalizeSummonerName(summonerName);

            // ‚úÖ CORRE√á√ÉO: Usar apenas chave unificada ws:client_info:{summonerName}
            String clientInfoKey = "ws:client_info:" + normalizedSummoner;
            RBucket<ClientInfo> clientInfoBucket = redisson.getBucket(clientInfoKey);
            ClientInfo clientInfo = clientInfoBucket.get();

            if (clientInfo != null && clientInfo.getSessionId() != null) {
                log.debug("üîç [RedisWS] Sess√£o encontrada: {} ‚Üí {}", normalizedSummoner, clientInfo.getSessionId());
                return Optional.of(clientInfo.getSessionId());
            }

            log.debug("‚ùå [RedisWS] Sess√£o N√ÉO encontrada para: {}", normalizedSummoner);
            return Optional.empty();

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao buscar sess√£o por summoner: {}", summonerName, e);
            return Optional.empty();
        }
    }

    /**
     * Busca summonerName por sessionId.
     * Usado para identificar quem enviou uma mensagem WebSocket.
     * 
     * @param sessionId ID da sess√£o WebSocket
     * @return Optional com summonerName se encontrado, empty se n√£o identificado
     */
    public Optional<String> getSummonerBySession(String sessionId) {
        try {
            if (sessionId == null || sessionId.isBlank()) {
                return Optional.empty();
            }

            // ‚úÖ CORRE√á√ÉO: Verificar se Redisson est√° ativo (evita erro durante shutdown)
            if (redisson.isShutdown() || redisson.isShuttingDown()) {
                log.debug("‚ö†Ô∏è [RedisWS] Redisson est√° desligado - retornando empty para sessionId: {}", sessionId);
                return Optional.empty();
            }

            // ‚úÖ CORRE√á√ÉO: Buscar em todas as chaves ws:client_info:* para encontrar o
            // sessionId
            Iterable<String> clientInfoKeys = redisson.getKeys().getKeysByPattern("ws:client_info:*");

            for (String clientInfoKey : clientInfoKeys) {
                RBucket<ClientInfo> clientInfoBucket = redisson.getBucket(clientInfoKey);
                ClientInfo clientInfo = clientInfoBucket.get();

                if (clientInfo != null && sessionId.equals(clientInfo.getSessionId())) {
                    String summonerName = clientInfo.getSummonerName();
                    log.debug("üîç [RedisWS] Summoner encontrado: {} ‚Üí {}", sessionId, summonerName);
                    return Optional.of(summonerName);
                }
            }

            log.debug("‚ùå [RedisWS] Summoner N√ÉO encontrado para sess√£o: {}", sessionId);
            return Optional.empty();

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao buscar summoner por sess√£o: {}", sessionId, e);
            return Optional.empty();
        }
    }

    /**
     * ‚úÖ NOVO: Limpa chaves corrompidas por ClassLoader conflicts
     */
    private void cleanupCorruptedKeys(String sessionId) {
        try {
            // ‚úÖ CORRE√á√ÉO: Usar summonerName em vez de sessionId
            String summonerName = getSummonerBySession(sessionId).orElse(null);
            if (summonerName == null) {
                return; // N√£o h√° nada para limpar
            }

            String clientInfoKey = "ws:client_info:" + summonerName;
            RBucket<Object> bucket = redisson.getBucket(clientInfoKey);

            // Tentar acessar para detectar ClassCastException
            try {
                Object data = bucket.get();
                if (data != null && !(data instanceof ClientInfo)) {
                    log.warn("‚ö†Ô∏è [RedisWS] Dados corrompidos detectados - limpando: {}", clientInfoKey);
                    bucket.delete();
                }
            } catch (ClassCastException e) {
                log.warn("‚ö†Ô∏è [RedisWS] ClassCastException - limpando chave corrompida: {}", clientInfoKey);
                bucket.delete();
            }

        } catch (Exception e) {
            log.debug("‚ö†Ô∏è [RedisWS] Erro durante limpeza de chaves corrompidas: {}", e.getMessage());
        }
    }

    /**
     * Busca metadata completa da conex√£o.
     * 
     * @param sessionId ID da sess√£o WebSocket
     * @return Optional com ClientInfo se encontrado, empty se n√£o existe
     */
    public Optional<ClientInfo> getClientInfo(String sessionId) {
        try {
            if (sessionId == null || sessionId.isBlank()) {
                return Optional.empty();
            }

            // ‚úÖ CORRE√á√ÉO: Verificar se Redisson est√° ativo (evita erro durante shutdown)
            if (redisson.isShutdown() || redisson.isShuttingDown()) {
                log.debug("‚ö†Ô∏è [RedisWS] Redisson est√° desligado - retornando empty para sessionId: {}", sessionId);
                return Optional.empty();
            }

            // ‚úÖ CORRE√á√ÉO: Buscar por sessionId primeiro, depois usar summonerName
            String summonerName = getSummonerBySession(sessionId).orElse(null);
            if (summonerName == null) {
                return Optional.empty();
            }

            String clientInfoKey = "ws:client_info:" + summonerName;
            RBucket<ClientInfo> clientInfoBucket = redisson.getBucket(clientInfoKey);

            try {
                ClientInfo clientInfo = clientInfoBucket.get();
                if (clientInfo != null) {
                    return Optional.of(clientInfo);
                }
            } catch (ClassCastException e) {
                // ‚úÖ CORRE√á√ÉO CR√çTICA: ClassLoader conflict (Spring Boot DevTools)
                log.warn(
                        "‚ö†Ô∏è [RedisWS] ClassCastException detectada (DevTools ClassLoader conflict) - limpando chave corrompida: {}",
                        clientInfoKey);
                try {
                    // Limpar chave corrompida
                    clientInfoBucket.delete();
                    log.info("‚úÖ [RedisWS] Chave corrompida removida: {}", clientInfoKey);
                } catch (Exception cleanupError) {
                    log.warn("‚ö†Ô∏è [RedisWS] Erro ao limpar chave corrompida: {}", cleanupError.getMessage());
                }
            }

            // ‚úÖ FALLBACK: Tentar a chave antiga (Hash) para compatibilidade
            RMap<String, String> clientMap = redisson.getMap(CLIENT_KEY_PREFIX + sessionId);
            if (clientMap.isEmpty()) {
                return Optional.empty();
            }

            ClientInfo fallbackClientInfo = ClientInfo.builder()
                    .sessionId(clientMap.get("sessionId"))
                    .summonerName(clientMap.get("summonerName"))
                    .ipAddress(clientMap.get("ipAddress"))
                    .connectedAt(Instant.parse(clientMap.get("connectedAt")))
                    .lastActivity(Instant.parse(clientMap.get("lastActivity")))
                    .userAgent(clientMap.get("userAgent"))
                    .build();

            return Optional.of(fallbackClientInfo);

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao buscar client info: {}", sessionId, e);
            return Optional.empty();
        }
    }

    /**
     * Atualiza timestamp de √∫ltima atividade (heartbeat).
     * Mant√©m sess√£o viva e extende TTL.
     * 
     * @param sessionId ID da sess√£o WebSocket
     * @return true se atualizou com sucesso, false se sess√£o n√£o existe
     */
    public boolean updateHeartbeat(String sessionId) {
        try {
            if (sessionId == null || sessionId.isBlank()) {
                return false;
            }

            RMap<String, String> clientMap = redisson.getMap(CLIENT_KEY_PREFIX + sessionId);
            if (clientMap.isEmpty()) {
                log.warn("‚ö†Ô∏è [RedisWS] Tentativa de heartbeat em sess√£o inexistente: {}", sessionId);
                return false;
            }

            // Atualizar lastActivity
            clientMap.put("lastActivity", Instant.now().toString());

            // ‚úÖ CORRE√á√ÉO: Extender TTL apenas da chave unificada
            clientMap.expire(SESSION_TTL_SECONDS, TimeUnit.SECONDS);

            String summonerName = clientMap.get("summonerName");
            // ‚úÖ CORRE√á√ÉO: N√ÉO estender TTL de chaves ws:session: e ws:player: - s√£o
            // redundantes!

            log.debug("üíì [RedisWS] Heartbeat atualizado: {} (summoner: {})", sessionId, summonerName);
            return true;

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao atualizar heartbeat: {}", sessionId, e);
            return false;
        }
    }

    /**
     * Remove sess√£o WebSocket (disconnect).
     * Remove todas as 3 chaves Redis associadas.
     * 
     * @param sessionId ID da sess√£o WebSocket
     * @return true se removeu com sucesso, false se n√£o existia
     */
    public boolean removeSession(String sessionId) {
        try {
            if (sessionId == null || sessionId.isBlank()) {
                return false;
            }

            // Buscar summonerName antes de deletar
            Optional<String> summonerOpt = getSummonerBySession(sessionId);

            // ‚úÖ CORRE√á√ÉO: Deletar apenas chave unificada
            if (summonerOpt.isPresent()) {
                String summonerName = summonerOpt.get();
                // Deletar apenas client_info usando summonerName
                redisson.getBucket("ws:client_info:" + summonerName).delete();
                log.info("üóëÔ∏è [RedisWS] Sess√£o removida: {} ({})", sessionId, summonerName);
            } else {
                log.info("üóëÔ∏è [RedisWS] Sess√£o removida: {} (summoner desconhecido)", sessionId);
            }

            return true;

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao remover sess√£o: {}", sessionId, e);
            return false;
        }
    }

    /**
     * ‚úÖ NOVO: Lista todas as informa√ß√µes de clientes ativos.
     * √ötil para confirma√ß√£o de identidade.
     * 
     * @return Map de sessionId ‚Üí ClientInfo
     */
    public Map<String, Object> getAllClientInfo() {
        try {
            Map<String, Object> allClients = new HashMap<>();

            // ‚úÖ CORRE√á√ÉO: Buscar todas as chaves ws:client_info:*
            Iterable<String> keys = redisson.getKeys().getKeysByPattern("ws:client_info:*");

            for (String key : keys) {
                RBucket<ClientInfo> clientInfoBucket = redisson.getBucket(key);
                ClientInfo clientInfo = clientInfoBucket.get();

                if (clientInfo != null && clientInfo.getSessionId() != null) {
                    // Criar Map com informa√ß√µes do cliente
                    Map<String, Object> clientData = new HashMap<>();
                    clientData.put("summonerName", clientInfo.getSummonerName());
                    clientData.put("ip", clientInfo.getIpAddress());
                    clientData.put("connectedAt", clientInfo.getConnectedAt());
                    clientData.put("lastActivity", clientInfo.getLastActivity());
                    clientData.put("userAgent", clientInfo.getUserAgent());

                    allClients.put(clientInfo.getSessionId(), clientData);
                }
            }

            log.debug("‚úÖ [RedisWSSession] {} clientes ativos listados", allClients.size());
            return allClients;

        } catch (Exception e) {
            log.error("‚ùå [RedisWSSession] Erro ao listar todos os clientes", e);
            return new HashMap<>();
        }
    }

    /**
     * Lista todas as sess√µes ativas.
     * √ötil para broadcast e monitoramento.
     * 
     * @return Map de sessionId ‚Üí summonerName
     */
    public Map<String, String> getAllActiveSessions() {
        try {
            Map<String, String> sessions = new HashMap<>();

            // ‚úÖ CORRE√á√ÉO: Buscar todas as chaves ws:client_info:*
            Iterable<String> keys = redisson.getKeys().getKeysByPattern("ws:client_info:*");

            for (String key : keys) {
                RBucket<ClientInfo> bucket = redisson.getBucket(key);
                ClientInfo clientInfo = bucket.get();

                if (clientInfo != null && clientInfo.getSessionId() != null) {
                    sessions.put(clientInfo.getSessionId(), clientInfo.getSummonerName());
                }
            }

            log.debug("üìä [RedisWS] Sess√µes ativas: {}", sessions.size());
            return sessions;

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao listar sess√µes ativas", e);
            return Collections.emptyMap();
        }
    }

    /**
     * Verifica se sess√£o existe e est√° ativa.
     * 
     * @param sessionId ID da sess√£o WebSocket
     * @return true se sess√£o existe, false caso contr√°rio
     */
    public boolean hasSession(String sessionId) {
        try {
            if (sessionId == null || sessionId.isBlank()) {
                return false;
            }

            // ‚úÖ CORRE√á√ÉO: Verificar se sessionId existe em alguma chave ws:client_info:*
            return getSummonerBySession(sessionId).isPresent();

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao verificar exist√™ncia de sess√£o: {}", sessionId, e);
            return false;
        }
    }

    /**
     * Verifica se jogador est√° online (tem sess√£o ativa).
     * 
     * @param summonerName Nome do invocador
     * @return true se jogador est√° online, false caso contr√°rio
     */
    public boolean isPlayerOnline(String summonerName) {
        try {
            if (summonerName == null || summonerName.isBlank()) {
                return false;
            }

            String normalizedSummoner = normalizeSummonerName(summonerName);
            // ‚úÖ CORRE√á√ÉO: Verificar se jogador tem chave ws:client_info:
            String clientInfoKey = "ws:client_info:" + normalizedSummoner;
            return redisson.getBucket(clientInfoKey).isExists();

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao verificar se jogador est√° online: {}", summonerName, e);
            return false;
        }
    }

    /**
     * Armazena informa√ß√µes completas do jogador identificado (identify_player).
     * 
     * Inclui: summonerName, profileIconId, puuid, summonerId, etc.
     * Permite restaurar identifica√ß√£o ap√≥s backend restart.
     * 
     * @param sessionId  ID da sess√£o WebSocket
     * @param playerInfo JSON com dados do jogador
     * @return true se armazenou com sucesso, false caso contr√°rio
     */
    public boolean storePlayerInfo(String sessionId, String playerInfo) {
        try {
            if (sessionId == null || playerInfo == null) {
                log.warn("‚ö†Ô∏è [RedisWS] Dados inv√°lidos para storePlayerInfo");
                return false;
            }

            String key = PLAYER_INFO_KEY_PREFIX + sessionId;
            RBucket<String> bucket = redisson.getBucket(key);
            bucket.set(playerInfo, SESSION_TTL_SECONDS, TimeUnit.SECONDS);

            log.debug("‚úÖ [RedisWS] Player info armazenado: sessionId={}", sessionId);
            return true;

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao armazenar player info: sessionId={}", sessionId, e);
            return false;
        }
    }

    /**
     * Recupera informa√ß√µes completas do jogador identificado.
     * 
     * @param sessionId ID da sess√£o WebSocket
     * @return JSON com dados do jogador, ou null se n√£o encontrado
     */
    public String getPlayerInfo(String sessionId) {
        try {
            if (sessionId == null) {
                return null;
            }

            String key = PLAYER_INFO_KEY_PREFIX + sessionId;
            RBucket<String> bucket = redisson.getBucket(key);
            String playerInfo = bucket.get();

            if (playerInfo != null) {
                log.debug("‚úÖ [RedisWS] Player info recuperado: sessionId={}", sessionId);
            } else {
                log.debug("‚ö†Ô∏è [RedisWS] Player info n√£o encontrado: sessionId={}", sessionId);
            }

            return playerInfo;

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao recuperar player info: sessionId={}", sessionId, e);
            return null;
        }
    }

    /**
     * Remove informa√ß√µes do jogador identificado.
     * ‚úÖ CORRIGIDO: Remove TODAS as chaves relacionadas √† sess√£o para evitar
     * duplica√ß√µes
     * 
     * @param sessionId ID da sess√£o WebSocket
     * @return true se removeu com sucesso, false caso contr√°rio
     */
    public boolean removePlayerInfo(String sessionId) {
        try {
            if (sessionId == null) {
                return false;
            }

            log.debug("üßπ [RedisWS] Iniciando limpeza completa para sessionId: {}", sessionId);

            // ‚úÖ CR√çTICO: Buscar summonerName antes de remover para limpar mapeamentos
            Optional<String> summonerOpt = getSummonerBySession(sessionId);
            String summonerName = summonerOpt.orElse(null);

            int removedCount = 0;

            // 1. Remover ws:player_info:{sessionId}
            String playerInfoKey = PLAYER_INFO_KEY_PREFIX + sessionId;
            if (redisson.getBucket(playerInfoKey).delete()) {
                removedCount++;
                log.debug("‚úÖ [RedisWS] Removido: {}", playerInfoKey);
            }

            // 2. ‚úÖ CORRE√á√ÉO: Remover ws:client_info:{summonerName} (formato unificado)
            if (summonerName != null) {
                String clientInfoKey = "ws:client_info:" + summonerName;
                if (redisson.getBucket(clientInfoKey).delete()) {
                    removedCount++;
                    log.debug("‚úÖ [RedisWS] Removido: {}", clientInfoKey);
                }
            }

            // 3. ‚úÖ CORRE√á√ÉO: Remover ws:client:{sessionId} (formato antigo Hash - limpeza)
            String clientKey = "ws:client:" + sessionId;
            if (redisson.getBucket(clientKey).delete()) {
                removedCount++;
                log.debug("‚úÖ [RedisWS] Removido: {}", clientKey);
            }

            // ‚úÖ CORRE√á√ÉO: N√ÉO remover chaves ws:session: e ws:player: - s√£o redundantes!
            // Apenas a chave ws:client_info:{summonerName} √© necess√°ria

            // 6. Remover PUUID constraint se existir (se m√©todo estiver dispon√≠vel)
            // ‚úÖ COMENTADO: M√©todo getPuuidBySession e constante PUUID_TO_PLAYER_KEY_PREFIX
            // n√£o est√£o implementados
            // TODO: Implementar se necess√°rio para limpeza completa de PUUID constraints
            /*
             * try {
             * String puuid = getPuuidBySession(sessionId);
             * if (puuid != null && !puuid.isEmpty()) {
             * String puuidKey = PUUID_TO_PLAYER_KEY_PREFIX + puuid;
             * if (redisson.getBucket(puuidKey).delete()) {
             * removedCount++;
             * log.debug("‚úÖ [RedisWS] Removido PUUID constraint: {}", puuidKey);
             * }
             * }
             * } catch (Exception e) {
             * log.debug("‚ö†Ô∏è [RedisWS] Erro ao remover PUUID constraint: {}",
             * e.getMessage());
             * }
             */

            if (removedCount > 0) {
                log.info(
                        "‚úÖ [RedisWS] Limpeza completa realizada: {} chaves removidas para sessionId={}, summonerName={}",
                        removedCount, sessionId, summonerName);
                return true;
            } else {
                log.debug("‚ÑπÔ∏è [RedisWS] Nenhuma chave encontrada para remover: sessionId={}", sessionId);
                return false;
            }

        } catch (Exception e) {
            log.error("‚ùå [RedisWS] Erro ao remover player info: sessionId={}", sessionId, e);
            return false;
        }
    }

    /**
     * Normaliza nome do invocador (lowercase, trim).
     * Garante consist√™ncia nos lookups.
     * 
     * @param summonerName Nome do invocador
     * @return Nome normalizado
     */
    private String normalizeSummonerName(String summonerName) {
        if (summonerName == null) {
            return "";
        }
        return summonerName.trim().toLowerCase();
    }

    /**
     * ‚úÖ NOVO: Atualiza timestamp da √∫ltima confirma√ß√£o de identidade
     */
    public void updateIdentityConfirmation(String sessionId) {
        try {
            // ‚úÖ CORRE√á√ÉO: Usar summonerName em vez de sessionId
            String summonerName = getSummonerBySession(sessionId).orElse(null);
            if (summonerName == null) {
                return;
            }

            String clientInfoKey = "ws:client_info:" + summonerName;
            RBucket<ClientInfo> clientBucket = redisson.getBucket(clientInfoKey);

            Optional<ClientInfo> clientInfoOpt = Optional.ofNullable(clientBucket.get());
            if (clientInfoOpt.isPresent()) {
                ClientInfo clientInfo = clientInfoOpt.get();

                // Atualizar timestamp
                ClientInfo updatedClientInfo = ClientInfo.builder()
                        .sessionId(clientInfo.getSessionId())
                        .summonerName(clientInfo.getSummonerName())
                        .ipAddress(clientInfo.getIpAddress())
                        .connectedAt(clientInfo.getConnectedAt())
                        .lastActivity(Instant.now()) // lastActivity atualizado
                        .userAgent(clientInfo.getUserAgent())
                        .build();

                clientBucket.set(updatedClientInfo, SESSION_TTL_SECONDS, TimeUnit.SECONDS);
                log.debug("‚úÖ [RedisWSSession] Timestamp de confirma√ß√£o atualizado: {}", sessionId);
            }

        } catch (Exception e) {
            log.error("‚ùå [RedisWSSession] Erro ao atualizar timestamp de confirma√ß√£o: {}", sessionId, e);
        }
    }

    /**
     * ‚úÖ CORRE√á√ÉO: M√©todo descontinuado - usar registerSession() em vez disso
     * Este m√©todo n√£o deveria ser usado pois cria ClientInfo com summonerName
     * "unknown"
     */
    @Deprecated
    public void storeClientInfoDirect(String sessionId, String ipAddress, String userAgent) {
        log.warn("‚ö†Ô∏è [RedisWS] storeClientInfoDirect() √© deprecated - usar registerSession() em vez disso");
        // N√£o fazer nada - deixar registerSession() gerenciar a cria√ß√£o
    }
}
