import { Component, Input, Output, EventEmitter, OnInit, OnDestroy, ChangeDetectorRef, ChangeDetectionStrategy, OnChanges, SimpleChanges, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { ChampionService, Champion } from '../../services/champion.service';
import { BotService } from '../../services/bot.service';
import { DraftChampionModalComponent } from './draft-champion-modal';
import { DraftConfirmationModalComponent } from './draft-confirmation-modal';
import { firstValueFrom } from 'rxjs';
import { ApiService } from '../../services/api';

// ‚úÖ MELHORADO: Sistema de logs mais robusto
function logDraft(...args: any[]) {
  const fs = (window as any).electronAPI?.fs;
  const path = (window as any).electronAPI?.path;
  const process = (window as any).electronAPI?.process;
  const logPath = path && process ? path.join(process.cwd(), 'draft.log') : '';
  const logLine = `[${new Date().toISOString()}] [DraftPickBan] ` + args.map(a => (typeof a === 'object' ? JSON.stringify(a) : a)).join(' ') + '\n';
  if (fs && logPath) {
    fs.appendFile(logPath, logLine, (err: any) => {
      if (err) console.error('Erro ao escrever log:', err);
    });
  }
  console.log('[DraftPickBan]', ...args);
}

// ‚úÖ NOVO: Fun√ß√£o para salvar logs na raiz do projeto
function saveLogToRoot(message: string, filename: string = 'draft-debug.log') {
  const fs = (window as any).electronAPI?.fs;
  const path = (window as any).electronAPI?.path;
  const process = (window as any).electronAPI?.process;

  if (fs && path && process) {
    const rootPath = process.cwd();
    const logPath = path.join(rootPath, filename);
    const timestamp = new Date().toISOString();
    const logLine = `[${timestamp}] ${message}\n`;

    fs.appendFile(logPath, logLine, (err: any) => {
      if (err) {
        console.error('Erro ao salvar log na raiz:', err);
      } else {
        console.log(`Log salvo em: ${logPath}`);
      }
    });
  }
}

@Component({
  selector: 'app-draft-pick-ban',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    DraftChampionModalComponent,
    DraftConfirmationModalComponent
  ],
  templateUrl: './draft-pick-ban.html',
  styleUrl: './draft-pick-ban.scss',
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class DraftPickBanComponent implements OnInit, OnDestroy, OnChanges {
  @Input() matchData: any = null;
  @Input() currentPlayer: any = null;
  @Output() draftComplete = new EventEmitter<any>();
  @Output() onPickBanComplete = new EventEmitter<any>();
  @Output() onPickBanCancel = new EventEmitter<void>();
  @Output() onOpenChampionModal = new EventEmitter<void>();
  @Output() onOpenConfirmationModal = new EventEmitter<void>();

  // ‚úÖ PROPRIEDADES SIMPLIFICADAS - apenas para exibi√ß√£o
  session: any = null;
  champions: any[] = [];
  championsByRole: any = {};
  showChampionModal: boolean = false;
  showConfirmationModal: boolean = false;
  confirmationData: any = null; // ‚úÖ NOVO: Dados de confirma√ß√£o dos jogadores
  isMyTurn: boolean = false;
  isWaitingBackend: boolean = false;
  timeRemaining: number = 30; // ‚úÖ CORRE√á√ÉO: Este valor ser√° sempre atualizado pelo backend via WebSocket
  matchId: number | null = null;
  currentPlayerTurn: any = null;
  realTimeSyncTimer: number | null = null;
  championsLoaded: boolean = false;

  // ‚úÖ NOVO: Propriedades para modo de edi√ß√£o
  isEditingMode: boolean = false;
  currentEditingPlayer: { playerId: string, phaseIndex: number } | null = null;

  // ‚úÖ NOVO: Controles de concorr√™ncia
  private ngOnChangesDebounceTimer: number | null = null;
  private isInitializing: boolean = false;
  private lastMatchDataHash: string = '';
  private updateInProgress: boolean = false;

  @ViewChild('confirmationModal') confirmationModal!: DraftConfirmationModalComponent;
  private readonly baseUrl: string;

  constructor(
    public championService: ChampionService,
    public botService: BotService,
    public cdr: ChangeDetectorRef,
    private readonly http: HttpClient,
    private readonly apiService: ApiService
  ) {
    this.baseUrl = this.apiService.getBaseUrl();
    logDraft('[DraftPickBan] Constructor inicializado');
  }

  ngOnInit() {
    logDraft('üöÄ [DraftPickBan] ngOnInit iniciado');
    saveLogToRoot(`üöÄ [DraftPickBan] ngOnInit iniciado`);

    // ‚úÖ NOVO: Marcar que estamos inicializando para evitar conflitos
    this.isInitializing = true;

    // ‚úÖ Configurar listener para mensagens do backend
    this.setupBackendListeners();

    // ‚úÖ NOVO: Aguardar ngOnChanges processar primeiro se matchData existir
    if (this.matchData) {
      // ‚úÖ NOVO: Aguardar um pouco para ngOnChanges processar primeiro
      setTimeout(() => {
        this.finishInitialization();
      }, 100);
    } else {
      this.finishInitialization();
    }
  }

  private finishInitialization(): void {
    try {
      if (this.matchData) {
        logDraft('üöÄ [DraftPickBan] matchData recebido:', this.matchData);
        saveLogToRoot(`üöÄ [finishInitialization] matchData recebido`);

        // ‚úÖ CORRE√á√ÉO: Garantir que matchId seja sempre definido
        this.matchId = this.matchData.matchId || this.matchData.id || null;
        saveLogToRoot(`üöÄ [finishInitialization] matchId definido: ${this.matchId}`);

        // ‚úÖ NOVO: S√≥ inicializar se session n√£o foi criada por ngOnChanges
        if (!this.session) {
          saveLogToRoot(`üöÄ [finishInitialization] Session n√£o existe - inicializando`);
          this.initializeSessionFromMatchData();
        } else {
          saveLogToRoot(`‚úÖ [finishInitialization] Session j√° existe - pulando inicializa√ß√£o`);
        }

        // ‚úÖ NOVO: Tentar recuperar backup se dispon√≠vel
        this.tryRestoreFromBackup();

        // ‚úÖ Carregar campe√µes
        this.loadChampions();

        // ‚úÖ Iniciar sincroniza√ß√£o peri√≥dica da sess√£o
        this.startSessionSync();

        // ‚úÖ CORRE√á√ÉO: Garantir que o estado inicial seja processado
        setTimeout(() => {
          if (this.session) {
            saveLogToRoot(`üîÑ [finishInitialization] Processando estado inicial do draft`);
            this.updateDraftState();
          }
        }, 100);
      } else {
        saveLogToRoot(`‚ùå [finishInitialization] matchData n√£o recebido`);
      }
    } finally {
      // ‚úÖ NOVO: Marcar inicializa√ß√£o como conclu√≠da
      this.isInitializing = false;
      saveLogToRoot(`‚úÖ [finishInitialization] Inicializa√ß√£o conclu√≠da`);
    }
  }

  ngOnDestroy() {
    logDraft('[DraftPickBan] === ngOnDestroy INICIADO ===');
    saveLogToRoot(`üîÑ [ngOnDestroy] Destruindo componente. Session exists: ${!!this.session}, actions: ${this.session?.actions?.length || 0}`);

    // ‚úÖ NOVO: Preservar dados importantes antes da destrui√ß√£o
    if (this.session?.actions?.length > 0) {
      saveLogToRoot(`üíæ [ngOnDestroy] Preservando ${this.session.actions.length} a√ß√µes do draft antes da destrui√ß√£o`);
      saveLogToRoot(`üíæ [ngOnDestroy] A√ß√µes preservadas: ${JSON.stringify(this.session.actions.map((a: any) => ({ champion: a.champion?.name, action: a.action, player: a.playerName })))}`);

      // Salvar no localStorage como backup
      try {
        const backupData = {
          matchId: this.matchId,
          session: this.session,
          timestamp: Date.now()
        };
        localStorage.setItem(`draftBackup_${this.matchId}`, JSON.stringify(backupData));
        saveLogToRoot(`üíæ [ngOnDestroy] Backup salvo no localStorage para match ${this.matchId}`);
      } catch (error) {
        saveLogToRoot(`‚ùå [ngOnDestroy] Erro ao salvar backup: ${error}`);
      }
    }

    // ‚úÖ NOVO: Limpar timers de debounce
    if (this.ngOnChangesDebounceTimer) {
      clearTimeout(this.ngOnChangesDebounceTimer);
      this.ngOnChangesDebounceTimer = null;
    }

    this.stopSessionSync();
    saveLogToRoot(`‚úÖ [ngOnDestroy] Componente destru√≠do com sucesso`);
    logDraft('[DraftPickBan] === ngOnDestroy CONCLU√çDO ===');
  }

  ngOnChanges(changes: SimpleChanges) {
    // ‚úÖ NOVO: Prevenir concorr√™ncia com debouncing
    if (this.ngOnChangesDebounceTimer) {
      clearTimeout(this.ngOnChangesDebounceTimer);
    }

    this.ngOnChangesDebounceTimer = window.setTimeout(() => {
      this.processNgOnChanges(changes);
    }, 50); // 50ms de debounce
  }

  private processNgOnChanges(changes: SimpleChanges) {
    if (this.updateInProgress) {
      saveLogToRoot(`‚ö†Ô∏è [processNgOnChanges] Update em progresso - ignorando mudan√ßa`);
      return;
    }

    if (changes['matchData']?.currentValue) {
      const currentValue = changes['matchData'].currentValue;

      // ‚úÖ NOVO: Verificar se dados realmente mudaram usando hash
      const dataHash = JSON.stringify(currentValue).substring(0, 100); // Primeiros 100 chars como hash
      if (dataHash === this.lastMatchDataHash) {
        saveLogToRoot(`‚è≠Ô∏è [processNgOnChanges] Dados id√™nticos - ignorando`);
        return;
      }
      this.lastMatchDataHash = dataHash;

      logDraft('üîÑ [DraftPickBan] === ngOnChanges CHAMADO ===');
      saveLogToRoot(`üîÑ [processNgOnChanges] matchData alterado (hash: ${dataHash.substring(0, 20)}...)`);

      this.updateInProgress = true;

      try {
        // ‚úÖ CORRE√á√ÉO: Garantir que matchId seja sempre atualizado
        const newMatchId = currentValue.matchId || currentValue.id || null;
        if (newMatchId !== this.matchId) {
          this.matchId = newMatchId;
          saveLogToRoot(`üîÑ [processNgOnChanges] matchId atualizado: ${this.matchId}`);
        }

        // ‚úÖ MELHORADO: S√≥ inicializar se n√£o estivermos no meio de uma inicializa√ß√£o
        if (!this.session || (this.session.currentAction === undefined && !this.isInitializing)) {
          this.session = currentValue;
          saveLogToRoot(`üîÑ [processNgOnChanges] Session inicializada: matchId=${this.matchId}`);
          this.updateDraftState();
        } else {
          // ‚úÖ CORRE√á√ÉO: Preservar dados importantes e apenas mesclar novos dados
          const oldCurrentAction = this.session.currentAction;
          const oldActions = this.session.actions || [];

          this.session = {
            ...this.session,
            ...currentValue,
            currentAction: oldCurrentAction, // ‚úÖ PRESERVAR currentAction
            actions: currentValue.actions?.length >= oldActions.length ? currentValue.actions : oldActions // ‚úÖ PRESERVAR a√ß√µes
          };
          saveLogToRoot(`‚è≠Ô∏è [processNgOnChanges] Preservando currentAction=${oldCurrentAction}, actions=${this.session.actions?.length || 0}`);
        }
      } finally {
        this.updateInProgress = false;
      }
    }

    if (changes['currentPlayer']) {
      const currentValue = changes['currentPlayer'].currentValue;
      saveLogToRoot(`üîÑ [processNgOnChanges] currentPlayer alterado: ${JSON.stringify(currentValue)}`);
    }
  }

  // ‚úÖ CONFIGURA√á√ÉO DE LISTENERS DO BACKEND
  private setupBackendListeners(): void {
    // Listener para mensagens de timer via WebSocket
    document.addEventListener('draftTimerUpdate', (event: any) => {
      if (event.detail?.matchId === this.matchId) {
        logDraft('‚è∞ [DraftPickBan] Timer atualizado via WebSocket:', event.detail);
        this.updateTimerFromBackend(event.detail);
      }
    });

    // Listener para timeouts via WebSocket
    document.addEventListener('draftTimeout', (event: any) => {
      if (event.detail?.matchId === this.matchId) {
        logDraft('‚è∞ [DraftPickBan] Timeout recebido via WebSocket:', event.detail);
        this.handleDraftTimeout(event.detail);
      }
    });

    // Listener para draftUpdate via WebSocket
    document.addEventListener('draftUpdate', (event: any) => {
      if (event.detail?.matchId === this.matchId) {
        logDraft('üîÑ [DraftPickBan] draftUpdate recebido via WebSocket:', event.detail);
        saveLogToRoot(`üöÄ [WebSocket] draftUpdate recebido - sincronizando IMEDIATAMENTE`);
        // ‚úÖ CORRE√á√ÉO: Sincroniza√ß√£o imediata quando receber WebSocket
        this.syncSessionWithBackend();
      }
    });

    // ‚úÖ NOVO: Listener para draft_action (principal evento do backend)
    document.addEventListener('draft_action', (event: any) => {
      if (event.detail?.matchId === this.matchId) {
        logDraft('üéØ [DraftPickBan] draft_action recebido via WebSocket:', event.detail);
        saveLogToRoot(`üöÄ [WebSocket] draft_action recebido - sincronizando IMEDIATAMENTE`);
        // Sincroniza√ß√£o imediata ap√≥s a√ß√£o de draft
        this.syncSessionWithBackend();
      }
    });

    // ‚úÖ NOVO: Listener para a√ß√µes de draft espec√≠ficas (mais granular)
    document.addEventListener('draftActionCompleted', (event: any) => {
      if (event.detail?.matchId === this.matchId) {
        logDraft('üéØ [DraftPickBan] draftActionCompleted recebido via WebSocket:', event.detail);
        saveLogToRoot(`üöÄ [WebSocket] draftActionCompleted recebido - sincronizando IMEDIATAMENTE`);
        // Sincroniza√ß√£o imediata ap√≥s a√ß√£o completada
        this.syncSessionWithBackend();
      }
    });

    // ‚úÖ NOVO: Listener para mudan√ßas de fase
    document.addEventListener('draftPhaseChanged', (event: any) => {
      if (event.detail?.matchId === this.matchId) {
        logDraft('üîÑ [DraftPickBan] draftPhaseChanged recebido via WebSocket:', event.detail);
        saveLogToRoot(`üöÄ [WebSocket] draftPhaseChanged recebido - sincronizando IMEDIATAMENTE`);
        // Sincroniza√ß√£o imediata quando fase mudar
        this.syncSessionWithBackend();
      }
    });

    // ‚úÖ NOVO: Listener para confirma√ß√µes do draft
    document.addEventListener('draft_confirmation_update', (event: any) => {
      if (event.detail?.matchId === this.matchId) {
        logDraft('üéØ [DraftPickBan] draft_confirmation_update recebido via WebSocket:', event.detail);
        saveLogToRoot(`‚úÖ [WebSocket] Confirma√ß√£o do draft atualizada - sincronizando`);

        // ‚úÖ NOVO: Atualizar dados de confirma√ß√£o diretamente
        this.confirmationData = {
          confirmations: event.detail.confirmations,
          allConfirmed: event.detail.allConfirmed
        };

        logDraft('üîÑ [DraftPickBan] Dados de confirma√ß√£o atualizados:', this.confirmationData);
        this.cdr.detectChanges();

        this.syncSessionWithBackend();
      }
    });

    // ‚úÖ NOVO: Listener para quando todos confirmaram (jogo pronto)
    document.addEventListener('game_ready', (event: any) => {
      if (event.detail?.matchId === this.matchId) {
        logDraft('üéØ [DraftPickBan] game_ready recebido via WebSocket:', event.detail);
        saveLogToRoot(`‚úÖ [WebSocket] Jogo pronto - todos confirmaram`);

        // ‚úÖ NOVO: Fechar modal de confirma√ß√£o e emitir evento de conclus√£o
        this.showConfirmationModal = false;
        this.confirmationData = event.detail.pickBanData || this.confirmationData;

        this.onPickBanComplete.emit({
          matchData: this.matchData,
          session: this.session,
          confirmationData: this.confirmationData,
          status: 'in_progress'
        });

        this.cdr.detectChanges();
      }
    });

    // ‚úÖ NOVO: Listener para altera√ß√µes de pick
    document.addEventListener('draft_pick_changed', (event: any) => {
      if (event.detail?.matchId === this.matchId) {
        logDraft('üîÑ [DraftPickBan] draft_pick_changed recebido via WebSocket:', event.detail);
        saveLogToRoot(`üîÑ [WebSocket] Pick alterado - sincronizando`);
        this.syncSessionWithBackend();
      }
    });
  }

  // ‚úÖ NOVO: Tentar restaurar dados do backup
  private tryRestoreFromBackup(): void {
    if (!this.matchId) {
      saveLogToRoot(`‚ùå [tryRestoreFromBackup] matchId n√£o dispon√≠vel`);
      return;
    }

    try {
      const backupKey = `draftBackup_${this.matchId}`;
      const backupData = localStorage.getItem(backupKey);

      if (backupData) {
        const backup = JSON.parse(backupData);
        const now = Date.now();
        const backupAge = now - backup.timestamp;

        // S√≥ usar backup se for de menos de 5 minutos
        if (backupAge < 5 * 60 * 1000) {
          saveLogToRoot(`üîÑ [tryRestoreFromBackup] Backup encontrado (${Math.round(backupAge / 1000)}s atr√°s), restaurando dados`);

          if (backup.session?.actions?.length > 0) {
            // Mesclar dados do backup com a sess√£o atual
            this.session = {
              ...this.session,
              actions: backup.session.actions || [],
              team1Picks: backup.session.team1Picks || [],
              team1Bans: backup.session.team1Bans || [],
              team2Picks: backup.session.team2Picks || [],
              team2Bans: backup.session.team2Bans || [],
              currentAction: backup.session.currentAction || this.session?.currentAction || 0
            };

            saveLogToRoot(`‚úÖ [tryRestoreFromBackup] ${backup.session.actions.length} a√ß√µes restauradas do backup`);
            saveLogToRoot(`‚úÖ [tryRestoreFromBackup] currentAction: ${this.session.currentAction}`);
          }

          // N√£o remover o backup ainda, s√≥ em caso de sucesso
        } else {
          saveLogToRoot(`‚è∞ [tryRestoreFromBackup] Backup muito antigo (${Math.round(backupAge / 1000)}s), ignorando`);
          localStorage.removeItem(backupKey);
        }
      } else {
        saveLogToRoot(`‚ÑπÔ∏è [tryRestoreFromBackup] Nenhum backup encontrado para match ${this.matchId}`);
      }
    } catch (error) {
      saveLogToRoot(`‚ùå [tryRestoreFromBackup] Erro ao restaurar backup: ${error}`);
    }
  }

  // ‚úÖ MELHORADO: Inicializa√ß√£o da sess√£o com logs detalhados
  private initializeSessionFromMatchData(): void {
    if (!this.matchData) {
      saveLogToRoot(`‚ùå [initializeSessionFromMatchData] matchData n√£o dispon√≠vel`);
      return;
    }

    logDraft('üöÄ [DraftPickBan] Inicializando sess√£o com dados do matchData');
    saveLogToRoot(`üöÄ [initializeSessionFromMatchData] Inicializando sess√£o`);

    this.session = {
      id: this.matchData.matchId || 0,
      blueTeam: this.matchData.blueTeam || this.matchData.team1 || [],
      redTeam: this.matchData.redTeam || this.matchData.team2 || [],
      phases: this.matchData.phases || [],
      currentAction: this.matchData.currentAction || 0,
      currentPlayerIndex: 0,
      extendedTime: 0,
      phase: this.matchData.phase || 'bans'
    };

    // ‚úÖ Normalizar dados dos times
    this.session.blueTeam = (this.session.blueTeam || []).map((p: any) => ({
      ...p,
      summonerName: p.summonerName || p.name,
      teamIndex: 1
    }));

    this.session.redTeam = (this.session.redTeam || []).map((p: any) => ({
      ...p,
      summonerName: p.summonerName || p.name,
      teamIndex: 2
    }));

    const sessionInfo = {
      blueTeamCount: this.session?.blueTeam?.length || 0,
      redTeamCount: this.session?.redTeam?.length || 0,
      phasesCount: this.session?.phases?.length || 0,
      currentAction: this.session?.currentAction || 0,
      phases: this.session?.phases || []
    };

    logDraft('üöÄ [DraftPickBan] Sess√£o inicializada:', sessionInfo);
    saveLogToRoot(`üöÄ [initializeSessionFromMatchData] Sess√£o inicializada: ${JSON.stringify(sessionInfo)}`);

    // ‚úÖ NOVO: Atualizar estado imediatamente ap√≥s inicializa√ß√£o
    this.updateDraftState();
  }

  // ‚úÖ CARREGAMENTO DE CAMPE√ïES
  private async loadChampions() {
    try {
      logDraft('üîÑ [loadChampions] Carregando campe√µes...');
      this.championService.getAllChampions().subscribe({
        next: (champions) => {
          this.champions = champions;
          this.championsLoaded = true;
          logDraft(`‚úÖ [loadChampions] ${this.champions.length} campe√µes carregados`);
          this.organizeChampionsByRole();
        },
        error: (error) => {
          logDraft('‚ùå [loadChampions] Erro ao carregar campe√µes:', error);
        }
      });
    } catch (error) {
      logDraft('‚ùå [loadChampions] Erro ao carregar campe√µes:', error);
    }
  }

  private organizeChampionsByRole() {
    this.championService.getChampionsByRole().subscribe({
      next: (championsByRole) => {
        this.championsByRole = championsByRole;
      },
      error: (error) => {
        logDraft('‚ùå [organizeChampionsByRole] Erro ao organizar campe√µes por role:', error);
      }
    });
  }

  // ‚úÖ SINCRONIZA√á√ÉO OTIMIZADA - Sob demanda via WebSocket
  private startSessionSync(): void {
    logDraft('[startSessionSync] üîÑ Iniciando sincroniza√ß√£o otimizada...');
    saveLogToRoot('[startSessionSync] ‚úÖ Sincroniza√ß√£o otimizada iniciada - usando WebSockets para atualiza√ß√µes em tempo real');

    // ‚úÖ CORRE√á√ÉO: Fazer apenas uma sincroniza√ß√£o inicial, depois confiar nos WebSockets
    this.syncSessionWithBackend();

    // ‚úÖ OPCIONAL: Fallback timer muito menos frequente (apenas para emerg√™ncias)
    this.realTimeSyncTimer = window.setInterval(async () => {
      // S√≥ sincronizar se n√£o recebemos updates via WebSocket por muito tempo
      await this.syncSessionWithBackend();
      saveLogToRoot('[startSessionSync] ‚ö†Ô∏è Sincroniza√ß√£o de emerg√™ncia executada (fallback)');
    }, 30000); // 30 segundos como fallback de emerg√™ncia

    logDraft('[startSessionSync] ‚úÖ Sincroniza√ß√£o otimizada configurada - sync inicial + WebSockets + fallback 30s');
  }

  private stopSessionSync(): void {
    if (this.realTimeSyncTimer) {
      clearInterval(this.realTimeSyncTimer);
      this.realTimeSyncTimer = null;
      logDraft('[stopSessionSync] ‚èπÔ∏è Sincroniza√ß√£o peri√≥dica parada');
    }
  }

  private validateSyncConditions(): { isValid: boolean; effectiveMatchId?: string } {
    const effectiveMatchId = this.matchId || this.matchData?.matchId || this.matchData?.id;
    if (!effectiveMatchId || !this.currentPlayer) {
      saveLogToRoot(`‚ùå [syncSessionWithBackend] matchId ou currentPlayer n√£o dispon√≠vel: matchId=${effectiveMatchId}, currentPlayer=${!!this.currentPlayer}`);
      logDraft('[syncSessionWithBackend] ‚ùå matchId ou currentPlayer n√£o dispon√≠vel');
      return { isValid: false };
    }

    // Update matchId if necessary
    if (effectiveMatchId !== this.matchId) {
      this.matchId = effectiveMatchId;
      saveLogToRoot(`üîÑ [syncSessionWithBackend] matchId corrigido: ${this.matchId}`);
    }

    return { isValid: true, effectiveMatchId };
  }

  private mergeSessionData(response: any): void {
    const backendCurrentAction = response.session.currentAction;
    const currentCurrentAction = this.session?.currentAction || 0;

    logDraft(`üîÑ [mergeSessionData] === INICIANDO MERGE ===`);
    logDraft(`üîÑ [mergeSessionData] currentAction: ${currentCurrentAction} ‚Üí ${backendCurrentAction}`);
    saveLogToRoot(`üîÑ [mergeSessionData] currentAction: ${currentCurrentAction} ‚Üí ${backendCurrentAction}`);

    if (backendCurrentAction === undefined || backendCurrentAction < 0) {
      logDraft(`‚ùå [mergeSessionData] backendCurrentAction inv√°lido: ${backendCurrentAction}`);
      saveLogToRoot(`‚ùå [mergeSessionData] backendCurrentAction inv√°lido: ${backendCurrentAction}`);
      return;
    }

    const currentActions = this.session?.actions || [];
    const backendActions = response.session.actions || [];

    // ‚úÖ CORRE√á√ÉO: Sempre usar dados do backend como fonte de verdade
    // Isso resolve o problema de atualiza√ß√£o atrasada
    const actionsToUse = backendActions;

    // ‚úÖ CORRE√á√ÉO: Log detalhado da sincroniza√ß√£o de a√ß√µes
    if (backendActions.length !== currentActions.length) {
      saveLogToRoot(`üîÑ [mergeSessionData] A√ß√µes diferentes: current=${currentActions.length}, backend=${backendActions.length}`);
      const actionSummary = backendActions.map((action: any) => `${action.playerName}‚Üí${action.champion?.name}`);
      saveLogToRoot(`üîÑ [mergeSessionData] Backend actions: ${JSON.stringify(actionSummary)}`);
    }

    // ‚úÖ NOVO: Log antes da atualiza√ß√£o
    const oldSession = { ...this.session };

    this.session = {
      ...this.session,
      // ‚úÖ SEMPRE usar dados do backend
      actions: actionsToUse,
      team1Picks: response.session.team1Picks || [],
      team1Bans: response.session.team1Bans || [],
      team2Picks: response.session.team2Picks || [],
      team2Bans: response.session.team2Bans || [],
      currentAction: backendCurrentAction,
      phase: response.session.phase || 'bans',
      // ‚úÖ CORRE√á√ÉO: Usar teams do backend para garantir consist√™ncia
      blueTeam: response.session.blueTeam || response.session.team1 || this.session?.blueTeam || [],
      redTeam: response.session.redTeam || response.session.team2 || this.session?.redTeam || [],
      phases: response.session.phases || this.session?.phases || []
    };

    // ‚úÖ NOVO: Extrair dados de confirma√ß√£o
    this.confirmationData = response.session.confirmations ? {
      confirmations: response.session.confirmations,
      allConfirmed: response.session.allConfirmed || false
    } : null;

    logDraft(`‚úÖ [mergeSessionData] Dados de confirma√ß√£o extra√≠dos:`, this.confirmationData);

    // ‚úÖ NOVO: Log ap√≥s a atualiza√ß√£o
    logDraft(`‚úÖ [mergeSessionData] Merge conclu√≠do - currentAction atualizado: ${oldSession.currentAction} ‚Üí ${this.session.currentAction}`);
    saveLogToRoot(`‚úÖ [mergeSessionData] A√ß√µes atualizadas: ${actionsToUse.length}, currentAction: ${backendCurrentAction}`);
    saveLogToRoot(`üîÑ [mergeSessionData] Session.currentAction agora √©: ${this.session.currentAction}`);
  }

  private async syncSessionWithBackend(): Promise<void> {
    const validation = this.validateSyncConditions();
    if (!validation.isValid) return;

    try {
      const url = `${this.baseUrl}/match/${validation.effectiveMatchId}/draft-session`;
      logDraft(`üîÑ [syncSessionWithBackend] === INICIANDO SINCRONIZA√á√ÉO ===`);
      logDraft(`üîÑ [syncSessionWithBackend] URL: ${url}`);
      saveLogToRoot(`üîÑ [syncSessionWithBackend] Sincronizando com: ${url}`);

      const response: any = await firstValueFrom(this.http.get(url));

      if (!response?.success || !response?.session) {
        logDraft('[syncSessionWithBackend] ‚ùå Resposta inv√°lida do backend');
        return;
      }

      const oldCurrentAction = this.session?.currentAction || 0;
      const newCurrentAction = response.session.currentAction || 0;
      const oldPhasesCount = this.session?.phases?.length || 0;
      const newPhasesCount = response.session.phases?.length || 0;

      logDraft(`üîÑ [syncSessionWithBackend] Comparando: old=${oldCurrentAction}, new=${newCurrentAction}`);
      saveLogToRoot(`üîÑ [syncSessionWithBackend] Resposta recebida: oldCurrentAction=${oldCurrentAction}, newCurrentAction=${newCurrentAction}, oldPhases=${oldPhasesCount}, newPhases=${newPhasesCount}`);
      saveLogToRoot(`üîÑ [syncSessionWithBackend] Resposta completa: ${JSON.stringify(response.session)}`);

      this.mergeSessionData(response);

      // ‚úÖ CORRE√á√ÉO: SEMPRE atualizar na primeira sincroniza√ß√£o ou quando h√° mudan√ßas
      const isFirstSync = !this.session || this.session.currentAction === undefined;
      const hasChanges = oldCurrentAction !== newCurrentAction || oldPhasesCount !== newPhasesCount;

      if (isFirstSync || hasChanges) {
        logDraft(`‚úÖ [syncSessionWithBackend] ${isFirstSync ? 'Primeira sincroniza√ß√£o' : 'Mudan√ßas detectadas'} (${oldCurrentAction}‚Üí${newCurrentAction}) - atualizando interface`);
        saveLogToRoot(`‚úÖ [syncSessionWithBackend] ${isFirstSync ? 'Primeira sincroniza√ß√£o' : 'Mudan√ßas detectadas'} - atualizando interface`);
        this.updateDraftState();
        this.cdr.detectChanges();
      } else {
        logDraft(`‚è≠Ô∏è [syncSessionWithBackend] Sem mudan√ßas (${oldCurrentAction}‚Üí${newCurrentAction}) - ignorando atualiza√ß√£o`);
        saveLogToRoot(`‚è≠Ô∏è [syncSessionWithBackend] Sem mudan√ßas - ignorando atualiza√ß√£o`);
        // ‚úÖ CORRE√á√ÉO: Mesmo sem mudan√ßas, garantir que o estado est√° correto na interface
        this.updateDraftState();
      }

      logDraft('[syncSessionWithBackend] ‚úÖ Interface atualizada ap√≥s sincroniza√ß√£o');
      saveLogToRoot(`‚úÖ [syncSessionWithBackend] Interface atualizada ap√≥s sincroniza√ß√£o`);
    } catch (error) {
      logDraft('[syncSessionWithBackend] ‚ùå Erro ao sincronizar com backend:', error);
      saveLogToRoot(`‚ùå [syncSessionWithBackend] Erro: ${error}`);
    }
  }

  // ‚úÖ NOVO: Sincroniza√ß√£o imediata com retry autom√°tico
  private async syncSessionWithRetry(maxRetries: number = 3, retryDelay: number = 500): Promise<void> {
    logDraft(`üîÑ [syncSessionWithRetry] Iniciando sincroniza√ß√£o imediata (max retries: ${maxRetries})`);
    saveLogToRoot(`üîÑ [syncSessionWithRetry] Iniciando sincroniza√ß√£o imediata ap√≥s a√ß√£o`);

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        const validation = this.validateSyncConditions();
        if (!validation.isValid) {
          logDraft(`‚ùå [syncSessionWithRetry] Tentativa ${attempt}: Condi√ß√µes de sync inv√°lidas`);
          return;
        }

        const url = `${this.baseUrl}/match/${validation.effectiveMatchId}/draft-session`;
        const response: any = await firstValueFrom(this.http.get(url));

        if (response?.success && response?.session) {
          logDraft(`‚úÖ [syncSessionWithRetry] Tentativa ${attempt}: Sucesso`);
          saveLogToRoot(`‚úÖ [syncSessionWithRetry] Sincroniza√ß√£o imediata bem-sucedida na tentativa ${attempt}`);

          this.mergeSessionData(response);
          this.updateDraftState();
          return; // Sucesso, sair do loop
        } else {
          throw new Error('Resposta inv√°lida do backend');
        }
      } catch (error) {
        logDraft(`‚ùå [syncSessionWithRetry] Tentativa ${attempt} falhou:`, error);
        saveLogToRoot(`‚ùå [syncSessionWithRetry] Tentativa ${attempt} falhou: ${JSON.stringify(error)}`);

        if (attempt < maxRetries) {
          logDraft(`‚è≥ [syncSessionWithRetry] Aguardando ${retryDelay}ms antes da pr√≥xima tentativa`);
          await new Promise(resolve => setTimeout(resolve, retryDelay));
          retryDelay *= 1.5; // Aumentar o delay exponencialmente
        } else {
          logDraft(`‚ùå [syncSessionWithRetry] Todas as ${maxRetries} tentativas falharam`);
          saveLogToRoot(`‚ùå [syncSessionWithRetry] Falha ap√≥s ${maxRetries} tentativas`);
        }
      }
    }
  }

  // ‚úÖ MELHORADO: Atualiza√ß√£o de estado com logs detalhados e controle de concorr√™ncia
  private updateDraftState(): void {
    if (!this.session) {
      saveLogToRoot(`‚ùå [updateDraftState] Session n√£o existe`);
      logDraft('üîÑ [updateDraftState] ‚ùå Session n√£o existe');
      return;
    }

    if (this.updateInProgress) {
      saveLogToRoot(`‚ö†Ô∏è [updateDraftState] Update j√° em progresso - ignorando`);
      return;
    }

    this.updateInProgress = true;

    try {
      logDraft('üîÑ [updateDraftState] === INICIANDO ATUALIZA√á√ÉO DE ESTADO ===');
      saveLogToRoot(`üîÑ [updateDraftState] Iniciando atualiza√ß√£o de estado. currentAction=${this.session.currentAction}, phases.length=${this.session.phases?.length || 0}, isEditingMode=${this.isEditingMode}`);

      // ‚úÖ CR√çTICO: Se estamos em modo de edi√ß√£o, N√ÉO fazer atualiza√ß√µes que alterem a interface
      if (this.isEditingMode) {
        logDraft('üéØ [updateDraftState] MODO EDI√á√ÉO ATIVO - saltando atualiza√ß√µes da interface');
        saveLogToRoot(`üéØ [updateDraftState] MODO EDI√á√ÉO ATIVO - preservando estado dos modais`);
        return;
      }

      // ‚úÖ CORRE√á√ÉO: Verificar se currentAction √© v√°lido
      if (this.session.currentAction === undefined || this.session.currentAction === null) {
        saveLogToRoot(`‚ö†Ô∏è [updateDraftState] currentAction undefined/null (${this.session.currentAction}), sincronizando com backend`);
        logDraft('‚ö†Ô∏è [updateDraftState] currentAction undefined/null, sincronizando com backend');
        this.syncSessionWithBackend();
        return;
      }

      // ‚úÖ CORRE√á√ÉO: Verificar se draft foi completado ANTES de considerar currentAction inv√°lido
      if (this.session.currentAction >= this.session.phases.length) {
        const isDraftCompleted = this.session.phase === 'completed' ||
          this.session.currentAction >= this.session.phases.length;

        if (isDraftCompleted) {
          logDraft('üéØ [updateDraftState] Draft completado detectado - exibindo modal de confirma√ß√£o');
          saveLogToRoot(`‚úÖ [updateDraftState] Draft completado (currentAction=${this.session.currentAction}, phases=${this.session.phases.length})`);

          // ‚úÖ LOGS DETALHADOS: Investigar dados da sess√£o para o modal
          console.log('üîç [Modal Confirma√ß√£o] Dados da sess√£o:', {
            currentAction: this.session.currentAction,
            phase: this.session.phase,
            phasesCount: this.session.phases?.length,
            phasesWithChampions: this.session.phases?.filter((phase: any) => phase.champion)?.length || 0,
            blueTeamLength: this.session.blueTeam?.length || 0,
            redTeamLength: this.session.redTeam?.length || 0,
            confirmationData: this.confirmationData
          });

          // Log detalhado das fases
          this.session.phases?.forEach((phase: any, index: number) => {
            console.log(`üîç [Modal Confirma√ß√£o] Fase ${index}:`, {
              action: phase.action,
              team: phase.team,
              playerId: phase.playerId,
              playerName: phase.playerName,
              hasChampion: !!phase.champion,
              championName: phase.champion?.name || 'N/A'
            });
          });

          // Atualizar estado da interface para mostrar modal de confirma√ß√£o
          this.isMyTurn = false;
          this.showChampionModal = false;
          this.showConfirmationModal = true;
          this.cdr.detectChanges();
          return;
        }

        saveLogToRoot(`‚ö†Ô∏è [updateDraftState] currentAction inv√°lido (${this.session.currentAction}), sincronizando com backend`);
        logDraft('‚ö†Ô∏è [updateDraftState] currentAction inv√°lido, sincronizando com backend');
        this.syncSessionWithBackend();
        return;
      }

      // ‚úÖ CORRE√á√ÉO: Verificar se matchId est√° dispon√≠vel
      if (!this.matchId) {
        saveLogToRoot(`‚ö†Ô∏è [updateDraftState] matchId n√£o dispon√≠vel, tentando corrigir`);
        const effectiveMatchId = this.matchData?.matchId || this.matchData?.id;
        if (effectiveMatchId) {
          this.matchId = effectiveMatchId;
          saveLogToRoot(`‚úÖ [updateDraftState] matchId corrigido: ${this.matchId}`);
        } else {
          saveLogToRoot(`‚ùå [updateDraftState] N√£o foi poss√≠vel corrigir matchId`);
          return;
        }
      }

      const currentPhase = this.session.phases[this.session.currentAction];
      if (!currentPhase) {
        saveLogToRoot(`‚ùå [updateDraftState] Fase atual n√£o existe para currentAction=${this.session.currentAction}`);
        logDraft('üîÑ [updateDraftState] ‚ùå Fase atual n√£o existe para currentAction:', this.session.currentAction);
        return;
      }

      // ‚úÖ MELHORADO: Atualizar jogador da vez com mais informa√ß√µes
      this.currentPlayerTurn = {
        playerId: currentPhase.playerId,
        playerName: currentPhase.playerName,
        team: currentPhase.team,
        action: currentPhase.action,
        actionIndex: currentPhase.actionIndex,
        playerIndex: currentPhase.playerIndex
      };

      saveLogToRoot(`üîÑ [updateDraftState] CurrentPlayerTurn definido: ${JSON.stringify(this.currentPlayerTurn)}`);

      // ‚úÖ MELHORADO: Verificar se √© a vez do jogador atual
      this.isMyTurn = this.checkIfMyTurn();

      saveLogToRoot(`üîÑ [updateDraftState] isMyTurn=${this.isMyTurn}`);

      // ‚úÖ MELHORADO: Atualizar estado da interface
      this.updateInterfaceState();

      // ‚úÖ NOVO: For√ßar detec√ß√£o de mudan√ßas
      this.cdr.detectChanges();

      logDraft('‚úÖ [updateDraftState] Estado do draft atualizado com sucesso');
      saveLogToRoot(`‚úÖ [updateDraftState] Estado do draft atualizado com sucesso`);
    } finally {
      this.updateInProgress = false;
    }
  }

  private updateInterfaceState(): void {
    logDraft('üîÑ [updateInterfaceState] === ATUALIZANDO INTERFACE ===');
    saveLogToRoot(`üîÑ [updateInterfaceState] Atualizando interface. isMyTurn=${this.isMyTurn}, currentPlayerTurn.action=${this.currentPlayerTurn?.action}, isEditingMode=${this.isEditingMode}`);

    // ‚úÖ CR√çTICO: Se est√° em modo de edi√ß√£o, N√ÉO alterar estados dos modais
    if (this.isEditingMode) {
      logDraft('üîÑ [updateInterfaceState] Modo de edi√ß√£o ativo - mantendo modal de campe√£o aberto');
      saveLogToRoot(`üéØ [updateInterfaceState] Modo de edi√ß√£o ativo - preservando estado do modal`);
      saveLogToRoot(`üîç [updateInterfaceState] Estado preservado: showChampionModal=${this.showChampionModal}, showConfirmationModal=${this.showConfirmationModal}`);

      // ‚úÖ NOVO: Garantir que o modal de campe√£o est√° aberto durante edi√ß√£o
      if (!this.showChampionModal) {
        saveLogToRoot(`‚ö†Ô∏è [updateInterfaceState] CORRE√á√ÉO: Modal de campe√£o estava fechado durante edi√ß√£o - reabrindo`);
        this.showChampionModal = true;
      }

      // ‚úÖ NOVO: Garantir que o modal de confirma√ß√£o est√° fechado durante edi√ß√£o
      if (this.showConfirmationModal) {
        saveLogToRoot(`‚ö†Ô∏è [updateInterfaceState] CORRE√á√ÉO: Modal de confirma√ß√£o estava aberto durante edi√ß√£o - fechando`);
        this.showConfirmationModal = false;
      }

      saveLogToRoot(`üéØ [updateInterfaceState] Estado final modo edi√ß√£o: showChampionModal=${this.showChampionModal}, showConfirmationModal=${this.showConfirmationModal}`);
      this.cdr.detectChanges();
      return;
    }

    // ‚úÖ NOVO: Verificar se draft foi completado
    const isDraftCompleted = this.session.phase === 'completed' ||
      this.session.currentAction >= (this.session.phases?.length || 0);

    if (isDraftCompleted) {
      logDraft('üéØ [updateInterfaceState] Draft completado - mostrando modal de confirma√ß√£o');
      saveLogToRoot(`‚úÖ [updateInterfaceState] Draft completado - mostrando modal de confirma√ß√£o`);
      this.showChampionModal = false;
      this.showConfirmationModal = true;
      this.cdr.detectChanges();
      return;
    }

    // ‚úÖ MELHORADO: Verificar se deve mostrar o modal de campe√µes
    const shouldShowModal = this.isMyTurn &&
      (this.currentPlayerTurn?.action === 'pick' || this.currentPlayerTurn?.action === 'ban') &&
      this.session &&
      this.session.currentAction < (this.session.phases?.length || 0);

    if (shouldShowModal) {
      logDraft('üîÑ [updateInterfaceState] √â minha vez de pick ou ban - mostrando modal');
      saveLogToRoot(`‚úÖ [updateInterfaceState] Mostrando modal de campe√µes para a√ß√£o: ${this.currentPlayerTurn?.action}`);
      this.showChampionModal = true;
      this.showConfirmationModal = false;
    } else {
      logDraft('üîÑ [updateInterfaceState] N√£o √© minha vez ou condi√ß√µes n√£o atendidas - ocultando modal');
      saveLogToRoot(`‚ùå [updateInterfaceState] Ocultando modal. isMyTurn=${this.isMyTurn}, action=${this.currentPlayerTurn?.action}, currentAction=${this.session?.currentAction}, phasesLength=${this.session?.phases?.length || 0}`);
      this.showChampionModal = false;
    }

    // ‚úÖ NOVO: Log detalhado do estado da interface
    const interfaceState = {
      showChampionModal: this.showChampionModal,
      showConfirmationModal: this.showConfirmationModal,
      isMyTurn: this.isMyTurn,
      currentAction: this.session?.currentAction,
      phasesLength: this.session?.phases?.length || 0,
      currentPhaseAction: this.currentPlayerTurn?.action,
      shouldShowModal,
      isDraftCompleted,
      isEditingMode: this.isEditingMode
    };

    logDraft('üîÑ [updateInterfaceState] Interface atualizada:', interfaceState);
    saveLogToRoot(`üîÑ [updateInterfaceState] Interface atualizada: ${JSON.stringify(interfaceState)}`);

    // ‚úÖ NOVO: For√ßar detec√ß√£o de mudan√ßas
    this.cdr.detectChanges();
  }

  // ‚úÖ MELHORADO: Verifica√ß√£o de turno com logs detalhados
  private checkIfMyTurn(): boolean {
    if (!this.session || !this.currentPlayer) {
      saveLogToRoot(`‚ùå [checkIfMyTurn] Session ou currentPlayer n√£o dispon√≠vel: session=${!!this.session}, currentPlayer=${!!this.currentPlayer}`);
      return false;
    }

    const currentPhase = this.session.phases[this.session.currentAction];
    if (!currentPhase) {
      saveLogToRoot(`‚ùå [checkIfMyTurn] Fase atual n√£o encontrada: currentAction=${this.session.currentAction}, phases.length=${this.session.phases?.length || 0}`);
      return false;
    }

    // ‚úÖ MELHORADO: M√∫ltiplas formas de identificar o jogador atual
    const currentPlayerIdentifiers = [
      this.currentPlayer.puuid,
      this.currentPlayer.summonerName,
      this.currentPlayer.displayName,
      this.currentPlayer.name,
      this.currentPlayer.gameName ? `${this.currentPlayer.gameName}#${this.currentPlayer.tagLine}` : null
    ].filter(Boolean);

    // ‚úÖ MELHORADO: M√∫ltiplas formas de identificar o jogador da vez
    const turnPlayerIdentifiers = [
      currentPhase.playerId,
      currentPhase.playerName
    ].filter(Boolean);

    // ‚úÖ NOVO: Log detalhado para debug
    const debugInfo = {
      currentAction: this.session.currentAction,
      currentPhaseAction: currentPhase.action,
      currentPhaseTeam: currentPhase.team,
      currentPlayerIdentifiers,
      turnPlayerIdentifiers,
      currentPlayer: {
        puuid: this.currentPlayer.puuid,
        summonerName: this.currentPlayer.summonerName,
        displayName: this.currentPlayer.displayName,
        name: this.currentPlayer.name,
        gameName: this.currentPlayer.gameName,
        tagLine: this.currentPlayer.tagLine
      },
      currentPhase: {
        playerId: currentPhase.playerId,
        playerName: currentPhase.playerName,
        action: currentPhase.action,
        team: currentPhase.team,
        playerIndex: currentPhase.playerIndex,
        actionIndex: currentPhase.actionIndex
      }
    };

    logDraft('üîÑ [checkIfMyTurn] Verificando turno:', debugInfo);
    saveLogToRoot(`üîç [checkIfMyTurn] Debug: ${JSON.stringify(debugInfo)}`);

    // ‚úÖ MELHORADO: Compara√ß√£o mais robusta
    const isMyTurn = currentPlayerIdentifiers.some(currentId =>
      turnPlayerIdentifiers.some(turnId =>
        currentId === turnId ||
        currentId?.toLowerCase() === turnId?.toLowerCase()
      )
    );

    if (isMyTurn) {
      saveLogToRoot(`‚úÖ [checkIfMyTurn] √â minha vez! currentPlayerIdentifiers=${currentPlayerIdentifiers}, turnPlayerIdentifiers=${turnPlayerIdentifiers}`);
    } else {
      saveLogToRoot(`‚ùå [checkIfMyTurn] N√£o √© minha vez. currentPlayerIdentifiers=${currentPlayerIdentifiers}, turnPlayerIdentifiers=${turnPlayerIdentifiers}`);
    }

    return isMyTurn;
  }

  // ‚úÖ M√âTODOS DE EXIBI√á√ÉO
  getBannedChampions(): Champion[] {
    if (!this.session) return [];

    const bannedChampions = this.session.phases
      .filter((phase: any) => phase.action === 'ban' && phase.champion && phase.locked)
      .map((phase: any) => phase.champion!)
      .filter((champion: any, index: number, self: any[]) =>
        index === self.findIndex((c: any) => c.id === champion.id)
      );

    return bannedChampions;
  }

  getTeamPicks(team: 'blue' | 'red'): Champion[] {
    if (!this.session) return [];

    // ‚úÖ MELHORADO: Usar dados das a√ß√µes se dispon√≠veis
    if (this.session.actions?.length > 0) {
      const teamPicks = this.session.actions
        .filter((action: any) => {
          const isCorrectTeam = (team === 'blue' && action.teamIndex === 1) ||
            (team === 'red' && action.teamIndex === 2);
          return isCorrectTeam && action.action === 'pick' && action.champion && action.locked;
        })
        .map((action: any) => action.champion);

      return teamPicks;
    }

    // Fallback para o m√©todo antigo
    const teamPicks = this.session.phases
      .filter((phase: any) => phase.team === team && phase.action === 'pick' && phase.champion && phase.locked)
      .map((phase: any) => phase.champion!);

    return teamPicks;
  }

  getTeamBans(team: 'blue' | 'red'): Champion[] {
    if (!this.session) return [];

    // ‚úÖ MELHORADO: Usar dados das a√ß√µes se dispon√≠veis
    if (this.session.actions?.length > 0) {
      const teamBans = this.session.actions
        .filter((action: any) => {
          const isCorrectTeam = (team === 'blue' && action.teamIndex === 1) ||
            (team === 'red' && action.teamIndex === 2);
          return isCorrectTeam && action.action === 'ban' && action.champion && action.locked;
        })
        .map((action: any) => action.champion);

      return teamBans;
    }

    // Fallback para o m√©todo antigo
    return this.session.phases
      .filter((phase: any) => phase.team === team && phase.action === 'ban' && phase.champion && phase.locked)
      .map((phase: any) => phase.champion!);
  }

  getSortedTeamByLane(team: 'blue' | 'red'): any[] {
    if (!this.session) {
      return [];
    }

    const teamPlayers = this.isBlueTeam(team) ? this.session.blueTeam : this.session.redTeam;
    const sortedPlayers = this.sortPlayersByLane(teamPlayers);

    return sortedPlayers;
  }

  private sortPlayersByLane(players: any[]): any[] {
    const laneOrder = ['top', 'jungle', 'mid', 'adc', 'support'];
    const playersCopy = [...players];

    playersCopy.sort((a, b) => {
      const laneA = a.lane || 'unknown';
      const laneB = b.lane || 'unknown';

      const indexA = laneOrder.indexOf(laneA);
      const indexB = laneOrder.indexOf(laneB);

      if (indexA === -1 && indexB === -1) return 0;
      if (indexA === -1) return 1;
      if (indexB === -1) return -1;

      return indexA - indexB;
    });

    const sortedPlayers = playersCopy;

    return sortedPlayers;
  }

  getPlayerLaneDisplayForPlayer(player: any): string {
    const lane = player.lane || 'unknown';
    return this.getLaneDisplayName(lane);
  }

  getLaneDisplayName(lane: string): string {
    const laneNames: { [key: string]: string } = {
      'top': 'üõ°Ô∏è Top',
      'jungle': 'üå≤ Jungle',
      'mid': '‚ö° Mid',
      'adc': 'üèπ ADC',
      'support': 'üíé Support',
      'unknown': '‚ùì Unknown'
    };
    return laneNames[lane] || laneNames['unknown'];
  }

  isCurrentPlayer(player: any): boolean {
    if (!this.currentPlayer || !player) return false;
    return this.botService.comparePlayers(this.currentPlayer, player);
  }

  isCurrentPlayerForPick(team: 'blue' | 'red', pickIndex: number): boolean {
    if (!this.currentPlayer || !this.session) return false;

    const teamPlayers = this.isBlueTeam(team) ? this.session.blueTeam : this.session.redTeam;
    const player = teamPlayers.find((p: any) => p.teamIndex === pickIndex);

    return player ? this.botService.comparePlayers(this.currentPlayer, player) : false;
  }

  isChampionBanned(champion: Champion): boolean {
    return this.getBannedChampions().some(c => c.id === champion.id);
  }

  isChampionPicked(champion: Champion): boolean {
    const bluePicks = this.getTeamPicks('blue');
    const redPicks = this.getTeamPicks('red');

    return [...bluePicks, ...redPicks].some(c => c.id === champion.id);
  }

  private checkPlayerMatch(teamPlayer: any, searchPlayer: any): boolean {
    // Prioridade 1: PUUID (jogadores humanos)
    if (searchPlayer.puuid && teamPlayer.puuid && teamPlayer.puuid === searchPlayer.puuid) {
      saveLogToRoot(`üéØ [checkPlayerMatch] Match por PUUID: ${searchPlayer.puuid}`);
      return true;
    }

    // Prioridade 2: summonerName (bots e jogadores)
    if (searchPlayer.summonerName && teamPlayer.summonerName && teamPlayer.summonerName === searchPlayer.summonerName) {
      saveLogToRoot(`üéØ [checkPlayerMatch] Match por summonerName: ${searchPlayer.summonerName}`);
      return true;
    }

    // Prioridade 3: gameName#tagLine (jogadores humanos)
    if (searchPlayer.gameName && searchPlayer.tagLine && teamPlayer.gameName && teamPlayer.tagLine) {
      const searchName = `${searchPlayer.gameName}#${searchPlayer.tagLine}`;
      const teamName = `${teamPlayer.gameName}#${teamPlayer.tagLine}`;
      if (searchName === teamName) {
        saveLogToRoot(`üéØ [checkPlayerMatch] Match por gameName#tagLine: ${searchName}`);
        return true;
      }
    }

    // Prioridade 4: displayName (fallback)
    if (searchPlayer.displayName && teamPlayer.displayName && teamPlayer.displayName === searchPlayer.displayName) {
      saveLogToRoot(`üéØ [checkPlayerMatch] Match por displayName: ${searchPlayer.displayName}`);
      return true;
    }

    return false;
  }

  private findPlayerInTeam(team: 'blue' | 'red', player: any): any {
    if (!this.session) return null;

    const teamPlayers = team === 'blue' ? this.session.blueTeam : this.session.redTeam;
    return teamPlayers.find((p: any) => this.checkPlayerMatch(p, player));
  }

  private findPickInActions(foundPlayer: any, team: 'blue' | 'red'): Champion | null {
    if (!this.session.actions?.length) return null;

    const teamIndex = team === 'blue' ? 1 : 2;

    // ‚úÖ DEBUG: Log detalhado do jogador procurado
    saveLogToRoot(`üîç [findPickInActions] === PROCURANDO PICK ===`);
    saveLogToRoot(`üîç [findPickInActions] Jogador procurado: ${JSON.stringify({
      name: foundPlayer.name || foundPlayer.summonerName,
      puuid: foundPlayer.puuid,
      summonerName: foundPlayer.summonerName,
      gameName: foundPlayer.gameName,
      tagLine: foundPlayer.tagLine,
      teamIndex: foundPlayer.teamIndex
    })}`);
    saveLogToRoot(`üîç [findPickInActions] Time: ${team} (teamIndex=${teamIndex})`);

    // ‚úÖ CORRE√á√ÉO: Melhorar identifica√ß√£o de jogador com prioridade correta
    const pickAction = this.session.actions.find((action: any) => {
      const isCorrectTeam = action.teamIndex === teamIndex;

      // ‚úÖ DEBUG: Log da a√ß√£o sendo analisada
      if (action.action === 'pick') {
        saveLogToRoot(`üîç [findPickInActions] Analisando a√ß√£o: ${JSON.stringify({
          teamIndex: action.teamIndex,
          playerId: action.playerId,
          playerName: action.playerName,
          champion: action.champion?.name,
          action: action.action
        })}`);
      }

      // ‚úÖ CORRE√á√ÉO: Para bots, comparar apenas pelo nome
      // Para jogadores humanos, priorizar gameName#tagLine ou PUUID
      let isCorrectPlayer = false;

      if (foundPlayer.puuid && action.playerId === foundPlayer.puuid) {
        // Jogador humano com PUUID
        isCorrectPlayer = true;
        saveLogToRoot(`üéØ [findPickInActions] Match por PUUID: ${foundPlayer.puuid} = ${action.playerId}`);
      } else if (foundPlayer.summonerName && action.playerName === foundPlayer.summonerName) {
        // Match por summonerName (bots ou jogadores)
        isCorrectPlayer = true;
        saveLogToRoot(`üéØ [findPickInActions] Match por summonerName: ${foundPlayer.summonerName} = ${action.playerName}`);
      } else if (foundPlayer.gameName && foundPlayer.tagLine) {
        // Jogador humano com gameName#tagLine
        const fullName = `${foundPlayer.gameName}#${foundPlayer.tagLine}`;
        if (action.playerName === fullName || action.playerId === fullName) {
          isCorrectPlayer = true;
          saveLogToRoot(`üéØ [findPickInActions] Match por gameName#tagLine: ${fullName}`);
        }
      }

      const isPickAction = action.action === 'pick';
      const hasChampion = action.champion && action.locked;

      if (isCorrectTeam && isCorrectPlayer && isPickAction && hasChampion) {
        saveLogToRoot(`‚úÖ [findPickInActions] Pick encontrado: ${action.playerName} ‚Üí ${action.champion.name}`);
      }

      return isCorrectTeam && isCorrectPlayer && isPickAction && hasChampion;
    });

    return pickAction?.champion || null;
  }

  private findPickInPhases(foundPlayer: any, team: 'blue' | 'red'): Champion | null {
    if (!this.session) return null;

    const pickPhases = this.session.phases.filter((phase: any) =>
      phase.action === 'pick' &&
      phase.champion &&
      phase.locked
    );

    for (const pickPhase of pickPhases) {
      if (this.isPlayerPhase(foundPlayer, pickPhase, team)) {
        return pickPhase.champion || null;
      }
    }

    return null;
  }

  private isPlayerPhase(foundPlayer: any, pickPhase: any, team: 'blue' | 'red'): boolean {
    if (pickPhase.playerIndex !== undefined && foundPlayer.teamIndex !== undefined) {
      const expectedTeamIndex = team === 'blue' ? pickPhase.playerIndex : pickPhase.playerIndex + 5;
      if (foundPlayer.teamIndex === expectedTeamIndex) return true;
    }

    return this.botService.comparePlayerWithId(foundPlayer, pickPhase.playerId || '') ||
      this.botService.comparePlayerWithId(foundPlayer, pickPhase.playerName || '');
  }

  getPlayerPick(team: 'blue' | 'red', player: any): Champion | null {
    const foundPlayer = this.findPlayerInTeam(team, player);
    if (!foundPlayer) return null;

    // Try to find pick in actions first
    const pickFromActions = this.findPickInActions(foundPlayer, team);
    if (pickFromActions) return pickFromActions;

    // Fallback to phases method
    return this.findPickInPhases(foundPlayer, team);
  }

  getPlayerBans(team: 'blue' | 'red', player: any): Champion[] {
    if (!this.session) return [];

    const teamPlayers = team === 'blue' ? this.session.blueTeam : this.session.redTeam;
    const foundPlayer = teamPlayers.find((p: any) => this.botService.comparePlayers(p, player));
    if (!foundPlayer) return [];

    // ‚úÖ MELHORADO: Usar dados das a√ß√µes se dispon√≠veis
    if (this.session.actions && this.session.actions.length > 0) {
      const teamIndex = team === 'blue' ? 1 : 2;

      // Buscar a√ß√µes de ban para este jogador
      const banActions = this.session.actions.filter((action: any) => {
        const isCorrectTeam = action.teamIndex === teamIndex;
        const isCorrectPlayer = action.playerName === foundPlayer.summonerName ||
          action.playerName === foundPlayer.name ||
          action.playerName === foundPlayer.displayName;
        const isBanAction = action.action === 'ban';
        const hasChampion = action.champion && action.locked;

        return isCorrectTeam && isCorrectPlayer && isBanAction && hasChampion;
      });

      return banActions.map((action: any) => action.champion);
    }

    // Fallback para o m√©todo antigo
    const banPhases = this.session.phases.filter((phase: any) =>
      phase.action === 'ban' &&
      phase.champion &&
      phase.locked
    );

    const playerBans: Champion[] = [];

    for (const banPhase of banPhases) {
      const phasePlayerName = banPhase.playerName || banPhase.playerId || '';

      const isPhasePlayer = this.botService.comparePlayerWithId(foundPlayer, phasePlayerName) ||
        this.botService.comparePlayerWithId(foundPlayer, banPhase.playerId || '') ||
        (banPhase.playerIndex !== undefined && foundPlayer.teamIndex === banPhase.playerIndex);

      if (isPhasePlayer) {
        if (banPhase.champion) {
          playerBans.push(banPhase.champion);
        }
      }
    }

    return playerBans;
  }

  getCurrentPlayerName(): string {
    // ‚úÖ LOG DEBUG: Sempre logar a chamada do m√©todo
    const debugInfo = {
      isEditingMode: this.isEditingMode,
      currentEditingPlayer: this.currentEditingPlayer,
      sessionExists: !!this.session,
      currentAction: this.session?.currentAction,
      phasesLength: this.session?.phases?.length
    };

    // ‚úÖ CRITICAL: Usar console.log para garantir que aparece nos logs
    console.log('üéØ [getCurrentPlayerName] CHAMADO:', debugInfo);
    saveLogToRoot(`üéØ [getCurrentPlayerName] CHAMADO: ${JSON.stringify(debugInfo)}`);

    if (!this.session) {
      logDraft('‚ùå [getCurrentPlayerName] Session n√£o existe');
      console.log('‚ùå [getCurrentPlayerName] Session n√£o existe');
      saveLogToRoot('‚ùå [getCurrentPlayerName] Session n√£o existe');
      return 'Jogador Desconhecido';
    }

    // ‚úÖ PRIORIDADE M√ÅXIMA: Se estamos em modo de edi√ß√£o, SEMPRE usar os dados do jogador sendo editado
    if (this.isEditingMode && this.currentEditingPlayer) {
      console.log('üö® [getCurrentPlayerName] MODO EDI√á√ÉO DETECTADO!', this.currentEditingPlayer);
      saveLogToRoot(`üö® [getCurrentPlayerName] MODO EDI√á√ÉO DETECTADO: ${JSON.stringify(this.currentEditingPlayer)}`);

      logDraft('üéØ [getCurrentPlayerName] MODO EDI√á√ÉO ATIVO - ignorando currentAction, buscando jogador editado:', this.currentEditingPlayer);

      // PRIMEIRO: Tentar encontrar a fase baseada no phaseIndex
      if (this.currentEditingPlayer.phaseIndex !== undefined &&
        this.session.phases &&
        this.session.phases[this.currentEditingPlayer.phaseIndex]) {
        const editPhase = this.session.phases[this.currentEditingPlayer.phaseIndex];
        logDraft('‚úÖ [getCurrentPlayerName] [EDI√á√ÉO] Encontrado por phaseIndex:', editPhase.playerName || editPhase.playerId);
        return editPhase.playerName || editPhase.playerId || 'Jogador em Edi√ß√£o';
      }

      // SEGUNDO: Buscar por playerId nas fases (busca mais flex√≠vel)
      if (this.session.phases) {
        const editPhase = this.session.phases.find((phase: any) => {
          // Comparar diferentes formatos de playerId
          const phasePlayerId = phase.playerId || phase.playerName;
          const editPlayerId = this.currentEditingPlayer?.playerId;

          logDraft('üîç [getCurrentPlayerName] [EDI√á√ÉO] Comparando:', phasePlayerId, 'vs', editPlayerId);

          return phasePlayerId === editPlayerId ||
            phase.playerName === editPlayerId ||
            phase.playerId === editPlayerId;
        });

        if (editPhase) {
          logDraft('‚úÖ [getCurrentPlayerName] [EDI√á√ÉO] Encontrado por playerId:', editPhase.playerName || editPhase.playerId);
          return editPhase.playerName || editPhase.playerId || 'Jogador em Edi√ß√£o';
        }
      }

      // TERCEIRO: Se ainda n√£o encontrou, usar o playerId diretamente
      logDraft('‚ö†Ô∏è [getCurrentPlayerName] [EDI√á√ÉO] Jogador n√£o encontrado nas fases, usando ID direto:', this.currentEditingPlayer.playerId);
      return this.currentEditingPlayer.playerId || 'Jogador em Edi√ß√£o';
    }

    // ‚úÖ CORRE√á√ÉO: Verificar se currentAction √© v√°lido (apenas quando N√ÉO est√° em modo de edi√ß√£o)
    if (this.session.currentAction === undefined || this.session.currentAction === null) {
      logDraft('‚ùå [getCurrentPlayerName] currentAction inv√°lido:', this.session.currentAction);
      return 'Jogador Desconhecido';
    }

    // ‚úÖ NOVO: Se o draft est√° completo (currentAction >= phases.length), n√£o h√° fase atual
    if (this.session.currentAction >= this.session.phases.length) {
      logDraft('üèÅ [getCurrentPlayerName] Draft completado - sem fase atual:', {
        currentAction: this.session.currentAction,
        phasesLength: this.session.phases.length
      });
      return 'Draft Completo';
    }

    const currentPhase = this.session.phases[this.session.currentAction];
    if (!currentPhase) {
      logDraft('‚ùå [getCurrentPlayerName] Fase atual n√£o encontrada:', {
        currentAction: this.session.currentAction,
        phasesLength: this.session.phases?.length || 0,
        phases: this.session.phases?.slice(0, 3) // Log das primeiras 3 fases para debug
      });
      return 'Jogador Desconhecido';
    }

    // ‚úÖ MELHORADO: Log detalhado da fase atual
    logDraft('üîç [getCurrentPlayerName] Fase atual:', {
      currentAction: this.session.currentAction,
      phase: currentPhase,
      playerName: currentPhase.playerName,
      playerId: currentPhase.playerId,
      playerIndex: currentPhase.playerIndex,
      actionIndex: currentPhase.actionIndex,
      team: currentPhase.team,
      action: currentPhase.action
    });

    // ‚úÖ MELHORADO: Priorizar playerName/playerId da fase atual
    if (currentPhase.playerName) {
      logDraft('‚úÖ [getCurrentPlayerName] Usando playerName da fase:', currentPhase.playerName);
      return currentPhase.playerName;
    }

    if (currentPhase.playerId) {
      logDraft('‚úÖ [getCurrentPlayerName] Usando playerId da fase:', currentPhase.playerId);
      return currentPhase.playerId;
    }

    // ‚úÖ FALLBACK: Buscar por playerIndex nos times
    const teamPlayers = currentPhase.team === 'blue' || currentPhase.team === 1 ? this.session.blueTeam : this.session.redTeam;

    if (currentPhase.playerIndex !== undefined && teamPlayers?.[currentPhase.playerIndex]) {
      const player = teamPlayers[currentPhase.playerIndex];
      const playerName = player.summonerName || player.name || player.displayName || player.id;

      if (playerName) {
        logDraft('‚úÖ [getCurrentPlayerName] Encontrado por playerIndex:', playerName);
        return playerName;
      }
    }

    // ‚úÖ √öLTIMO FALLBACK: Buscar por actionIndex nas fases
    if (currentPhase.actionIndex !== undefined) {
      const phaseByActionIndex = this.session.phases.find((p: any) => p.actionIndex === currentPhase.actionIndex);
      if (phaseByActionIndex && (phaseByActionIndex.playerName || phaseByActionIndex.playerId)) {
        const playerName = phaseByActionIndex.playerName || phaseByActionIndex.playerId;
        logDraft('‚úÖ [getCurrentPlayerName] Encontrado por actionIndex:', playerName);
        return playerName;
      }
    }

    logDraft('‚ùå [getCurrentPlayerName] Nenhum nome de jogador encontrado para fase:', currentPhase);
    return 'Jogador Desconhecido';
  }

  getCurrentActionText(): string {
    if (!this.session) return '';

    const currentPhase = this.session.phases[this.session.currentAction];
    if (!currentPhase) return '';

    return currentPhase.action === 'ban' ? 'Banir Campe√£o' : 'Escolher Campe√£o';
  }

  getCurrentActionIcon(): string {
    if (!this.session) return '';

    const currentPhase = this.session.phases[this.session.currentAction];
    if (!currentPhase) return '';

    return currentPhase.action === 'ban' ? 'üö´' : '‚≠ê';
  }

  isPlayerBot(player: any): boolean {
    return this.botService.isBot(player);
  }

  getPlayerTeam(): 'blue' | 'red' {
    if (!this.currentPlayer || !this.session) return 'blue';

    const blueTeamPlayer = this.session.blueTeam.find((p: any) => this.botService.comparePlayers(p, this.currentPlayer));
    return blueTeamPlayer ? 'blue' : 'red';
  }

  getPhaseProgress(): number {
    if (!this.session?.phases?.length) return 0;
    return Math.floor((this.session.currentAction / this.session.phases.length) * 100);
  }

  // ‚úÖ NOVO: Verifica se estamos na √∫ltima a√ß√£o (vig√©sima) para mostrar bot√£o de confirma√ß√£o
  isLastAction(): boolean {
    if (!this.session?.phases?.length) return false;
    return this.session.currentAction >= this.session.phases.length - 1;
  }

  // ‚úÖ M√âTODOS DE INTERFACE
  onImageError(event: any, champion: Champion): void {
    event.target.src = 'assets/images/champion-placeholder.svg';
  }

  openChampionModal(): void {
    logDraft('üéØ [openChampionModal] === ABRINDO MODAL DE CAMPE√ïES ===');
    saveLogToRoot(`üéØ [openChampionModal] Tentando abrir modal de campe√µes`);

    if (!this.session) {
      logDraft('‚ùå [openChampionModal] Session n√£o existe - n√£o abrindo modal');
      saveLogToRoot(`‚ùå [openChampionModal] Session n√£o existe`);
      return;
    }

    // ‚úÖ CORRE√á√ÉO: For√ßar atualiza√ß√£o do estado antes de verificar se √© a vez
    this.updateDraftState();

    if (!this.isMyTurn) {
      logDraft('‚ùå [openChampionModal] N√£o √© a vez do jogador, n√£o abrindo modal');
      saveLogToRoot(`‚ùå [openChampionModal] N√£o √© a vez do jogador. isMyTurn=${this.isMyTurn}`);
      return;
    }
    if (this.session.phase === 'completed' || this.session.currentAction >= this.session.phases.length) {
      logDraft('‚ùå [openChampionModal] Sess√£o completada ou inv√°lida - n√£o abrindo modal');
      saveLogToRoot(`‚ùå [openChampionModal] Sess√£o completada ou inv√°lida. phase=${this.session.phase}, currentAction=${this.session.currentAction}, phases.length=${this.session.phases.length}`);
      return;
    }

    this.showChampionModal = true;
    this.cdr.markForCheck();
    logDraft('üéØ [openChampionModal] === FIM DA ABERTURA DO MODAL ===');
    saveLogToRoot(`‚úÖ [openChampionModal] Modal aberto com sucesso. showChampionModal=${this.showChampionModal}`);
  }

  openConfirmationModal(): void {
    logDraft('üéØ [openConfirmationModal] === ABRINDO MODAL DE CONFIRMA√á√ÉO ===');

    // ‚úÖ NOVO: Sincronizar dados antes de abrir modal
    this.syncConfirmationData();

    this.showConfirmationModal = true;
    this.cdr.markForCheck();
  }

  // ‚úÖ NOVO: M√©todo para sincronizar dados de confirma√ß√£o
  private async syncConfirmationData(): Promise<void> {
    try {
      if (!this.matchId) return;

      logDraft('üîÑ [syncConfirmationData] Sincronizando dados de confirma√ß√£o...');

      const response = await firstValueFrom(this.http.get(`${this.baseUrl}/match/${this.matchId}/confirmation-status`));

      if (response && (response as any).confirmationData) {
        this.confirmationData = (response as any).confirmationData;
        logDraft('‚úÖ [syncConfirmationData] Dados de confirma√ß√£o sincronizados:', this.confirmationData);
        this.cdr.detectChanges();
      }
    } catch (error) {
      logDraft('‚ùå [syncConfirmationData] Erro ao sincronizar dados de confirma√ß√£o:', error);
    }
  }

  // ‚úÖ M√âTODOS DE A√á√ÉO
  async onChampionSelected(champion: Champion): Promise<void> {
    logDraft('üéØ [onChampionSelected] === CAMPE√ÉO SELECIONADO ===');
    logDraft('üéØ [onChampionSelected] Campe√£o selecionado:', champion.name);
    saveLogToRoot(`üéØ [onChampionSelected] Campe√£o selecionado: ${champion.name} (ID: ${champion.id})`);

    if (!this.session) {
      logDraft('‚ùå [onChampionSelected] Session n√£o existe');
      saveLogToRoot(`‚ùå [onChampionSelected] Session n√£o existe`);
      return;
    }

    // ‚úÖ NOVO: Verificar se estamos em modo de edi√ß√£o
    if (this.isEditingMode && this.currentEditingPlayer) {
      logDraft('üîÑ [onChampionSelected] Modo edi√ß√£o - sobrescrevendo pick anterior');
      saveLogToRoot(`üîÑ [onChampionSelected] Editando pick de ${this.currentEditingPlayer.playerId} para ${champion.name}`);

      await this.updatePlayerPick(this.currentEditingPlayer.playerId, champion);

      // Resetar modo de edi√ß√£o
      this.isEditingMode = false;
      this.currentEditingPlayer = null;
      this.showChampionModal = false;
      this.showConfirmationModal = true; // Voltar para modal de confirma√ß√£o
      this.cdr.detectChanges();
      return;
    }

    // ‚úÖ NOVO: Verificar se estamos em draft completado (modo confirma√ß√£o)
    const isDraftCompleted = this.session.phase === 'completed' ||
      this.session.currentAction >= (this.session.phases?.length || 0);

    if (isDraftCompleted) {
      logDraft('üîÑ [onChampionSelected] Draft completado - editando pick via bot√£o');
      saveLogToRoot(`üîÑ [onChampionSelected] Draft completado - editando pick para campe√£o ${champion.name}`);
      await this.changePlayerPick(Number(champion.id));
      return;
    }

    const currentPhase = this.session.phases[this.session.currentAction];
    if (!currentPhase) {
      logDraft('‚ùå [onChampionSelected] Fase atual n√£o existe');
      saveLogToRoot(`‚ùå [onChampionSelected] Fase atual n√£o existe para currentAction=${this.session.currentAction}`);
      return;
    }

    // ‚úÖ NOVO: Log detalhado da fase atual
    saveLogToRoot(`üéØ [onChampionSelected] Fase atual: ${JSON.stringify(currentPhase)}`);

    // ‚úÖ MELHORADO: Atualizar fase local
    currentPhase.champion = champion;
    currentPhase.locked = true;
    currentPhase.timeRemaining = 0;
    this.showChampionModal = false;

    if (!this.botService.isBot(this.currentPlayer)) {
      this.isWaitingBackend = true;
    }

    // ‚úÖ CORRE√á√ÉO: Garantir que matchId seja sempre v√°lido
    const effectiveMatchId = this.matchId || this.matchData?.matchId || this.matchData?.id;
    if (effectiveMatchId) {
      saveLogToRoot(`üéØ [onChampionSelected] Usando matchId: ${effectiveMatchId}`);
      try {
        // ‚úÖ CORRE√á√ÉO: Priorizar summonerName para compatibilidade com backend
        let playerIdentifier = '';

        // Prioridade 1: summonerName (o que o backend espera principalmente)
        if (this.currentPlayer?.summonerName) {
          playerIdentifier = this.currentPlayer.summonerName;
          saveLogToRoot(`üéØ [onChampionSelected] Usando summonerName: ${playerIdentifier}`);
        } else if (this.currentPlayer?.displayName) {
          playerIdentifier = this.currentPlayer.displayName;
          saveLogToRoot(`üéØ [onChampionSelected] Usando displayName: ${playerIdentifier}`);
        } else if (this.currentPlayer?.gameName && this.currentPlayer?.tagLine) {
          playerIdentifier = `${this.currentPlayer.gameName}#${this.currentPlayer.tagLine}`;
          saveLogToRoot(`üéØ [onChampionSelected] Usando gameName#tagLine: ${playerIdentifier}`);
        } else if (this.currentPlayer?.puuid) {
          playerIdentifier = this.currentPlayer.puuid;
          saveLogToRoot(`üéØ [onChampionSelected] Usando PUUID como fallback: ${playerIdentifier}`);
        } else if (currentPhase.playerId) {
          playerIdentifier = currentPhase.playerId;
          saveLogToRoot(`üéØ [onChampionSelected] Usando playerId da fase: ${playerIdentifier}`);
        } else if (currentPhase.playerName) {
          playerIdentifier = currentPhase.playerName;
          saveLogToRoot(`üéØ [onChampionSelected] Usando playerName da fase: ${playerIdentifier}`);
        }

        const url = `${this.baseUrl}/match/draft-action`;
        const requestData = {
          matchId: effectiveMatchId,
          playerId: playerIdentifier,
          championId: champion.id,
          action: currentPhase.action,
          actionIndex: this.session.currentAction
        };

        logDraft('üéØ [onChampionSelected] Enviando a√ß√£o para backend:', requestData);
        saveLogToRoot(`üéØ [onChampionSelected] Enviando a√ß√£o: ${JSON.stringify(requestData)}`);

        const response = await firstValueFrom(this.http.post(url, requestData, {
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        }));

        logDraft('‚úÖ [onChampionSelected] A√ß√£o enviada para backend com sucesso');
        saveLogToRoot(`‚úÖ [onChampionSelected] A√ß√£o enviada para backend com sucesso. Resposta: ${JSON.stringify(response)}`);

        // ‚úÖ OTIMIZA√á√ÉO: Sincroniza√ß√£o imediata ap√≥s a√ß√£o + retry autom√°tico
        this.syncSessionWithRetry();

        // ‚úÖ MELHORADO: Aguardar um pouco antes de parar o loading
        setTimeout(() => {
          this.isWaitingBackend = false;
          logDraft('‚úÖ [onChampionSelected] Loading finalizado');
          saveLogToRoot(`‚úÖ [onChampionSelected] Loading finalizado`);
        }, 1000);
      } catch (error: any) {
        logDraft('‚ùå [onChampionSelected] Erro ao enviar para backend:', error);
        saveLogToRoot(`‚ùå [onChampionSelected] Erro: ${error}`);

        // ‚úÖ NOVO: Fallback para erro de autoriza√ß√£o
        if (error?.error?.error?.includes('n√£o autorizado')) {
          saveLogToRoot(`üîÑ [onChampionSelected] Erro de autoriza√ß√£o detectado - tentando com playerId da fase`);

          // Reconstruir URL e requestData no escopo correto
          const fallbackUrl = `${this.baseUrl}/match/draft-action`;
          const fallbackRequestData = {
            matchId: effectiveMatchId,
            playerId: currentPhase.playerName || currentPhase.playerId,
            championId: champion.id,
            action: currentPhase.action,
            actionIndex: this.session.currentAction
          };

          try {
            saveLogToRoot(`üîÑ [onChampionSelected] Tentativa fallback: ${JSON.stringify(fallbackRequestData)}`);
            const fallbackResponse = await firstValueFrom(this.http.post(fallbackUrl, fallbackRequestData, {
              headers: { 'Content-Type': 'application/json' }
            }));
            saveLogToRoot(`‚úÖ [onChampionSelected] Fallback bem-sucedido: ${JSON.stringify(fallbackResponse)}`);

            // Se o fallback funcionar, seguir o fluxo normal
            this.syncSessionWithRetry();
            setTimeout(() => {
              this.isWaitingBackend = false;
              logDraft('‚úÖ [onChampionSelected] Loading finalizado (fallback)');
              saveLogToRoot(`‚úÖ [onChampionSelected] Loading finalizado (fallback)`);
            }, 1000);
            return;
          } catch (fallbackError) {
            saveLogToRoot(`‚ùå [onChampionSelected] Fallback tamb√©m falhou: ${fallbackError}`);
          }
        }

        this.isWaitingBackend = false;
      }
    } else {
      logDraft('‚ùå [onChampionSelected] Nenhum matchId dispon√≠vel');
      saveLogToRoot(`‚ùå [onChampionSelected] Nenhum matchId dispon√≠vel`);
      this.isWaitingBackend = false;
    }
  }

  // ‚úÖ REMOVIDO: onEditRequested - n√£o √© mais necess√°rio, o backend controla tudo

  completePickBan() {
    this.onPickBanComplete.emit({
      session: this.session,
      blueTeam: this.session?.blueTeam,
      redTeam: this.session?.redTeam
    });
  }

  cancelPickBan() {
    this.onPickBanCancel.emit();
  }

  // ‚úÖ NOVO: M√©todos para modal de confirma√ß√£o
  onConfirmationModalClose(): void {
    logDraft('üéØ [onConfirmationModalClose] Fechando modal de confirma√ß√£o');
    this.showConfirmationModal = false;
    this.cdr.detectChanges();
  }

  async onConfirmationModalConfirm(): Promise<void> {
    logDraft('üéØ [onConfirmationModalConfirm] === CONFIRMANDO DRAFT ===');
    saveLogToRoot(`‚úÖ [onConfirmationModalConfirm] Jogador confirmando draft`);

    try {
      if (!this.matchId || !this.currentPlayer) {
        throw new Error('matchId ou currentPlayer n√£o dispon√≠vel');
      }

      const playerId = this.currentPlayer.id?.toString() ||
        (this.currentPlayer.gameName && this.currentPlayer.tagLine
          ? `${this.currentPlayer.gameName}#${this.currentPlayer.tagLine}`
          : this.currentPlayer.summonerName || this.currentPlayer.name);

      const response = await firstValueFrom(this.http.post(`${this.baseUrl}/match/confirm-draft`, {
        matchId: this.matchId,
        playerId: playerId
      }));

      logDraft('‚úÖ [onConfirmationModalConfirm] Draft confirmado com sucesso:', response);
      saveLogToRoot(`‚úÖ [onConfirmationModalConfirm] Draft confirmado com sucesso: ${JSON.stringify(response)}`);

      // ‚úÖ NOVO: Atualizar estado do modal de confirma√ß√£o
      const responseData = response as any;
      if (this.confirmationModal) {
        this.confirmationModal.updateConfirmationState(
          responseData.success || false,
          responseData.allConfirmed || false
        );
      }

      // Modal ser√° fechado automaticamente quando receber WebSocket de que todos confirmaram
      // ou permanecer√° aberto aguardando outros jogadores
    } catch (error) {
      logDraft('‚ùå [onConfirmationModalConfirm] Erro ao confirmar draft:', error);
      saveLogToRoot(`‚ùå [onConfirmationModalConfirm] Erro: ${JSON.stringify(error)}`);

      // ‚úÖ NOVO: Atualizar estado em caso de erro
      if (this.confirmationModal) {
        this.confirmationModal.updateConfirmationState(false, false);
      }
    }
  }

  onConfirmationModalCancel(): void {
    logDraft('üéØ [onConfirmationModalCancel] === CANCELANDO PARTIDA ===');
    saveLogToRoot(`‚ùå [onConfirmationModalCancel] Jogador cancelando partida`);
    this.showConfirmationModal = false;
    this.onPickBanCancel.emit();
  }

  async onConfirmationModalEditPick(data: { playerId: string, phaseIndex: number }): Promise<void> {
    logDraft('üéØ [onConfirmationModalEditPick] === EDITANDO PICK ===', data);
    saveLogToRoot(`‚úèÔ∏è [onConfirmationModalEditPick] Editando pick: ${JSON.stringify(data)}`);

    // ‚úÖ PRIMEIRO: Log do estado atual ANTES de qualquer altera√ß√£o
    saveLogToRoot(`üîç [onConfirmationModalEditPick] ANTES: showChampionModal=${this.showChampionModal}, showConfirmationModal=${this.showConfirmationModal}, isEditingMode=${this.isEditingMode}`);

    // ‚úÖ CR√çTICO: Definir modo de edi√ß√£o PRIMEIRO para bloquear updateInterfaceState
    this.isEditingMode = true;
    saveLogToRoot(`üîí [onConfirmationModalEditPick] MODO EDI√á√ÉO ATIVADO: isEditingMode=${this.isEditingMode}`);

    // ‚úÖ Armazenar dados da edi√ß√£o ANTES de alterar modais
    this.currentEditingPlayer = {
      playerId: data.playerId,
      phaseIndex: data.phaseIndex
    };
    saveLogToRoot(`ÔøΩ [onConfirmationModalEditPick] Dados de edi√ß√£o armazenados: ${JSON.stringify(this.currentEditingPlayer)}`);

    // ‚úÖ VERIFICAR: Buscar informa√ß√µes do jogador nas fases para valida√ß√£o
    if (this.session?.phases && data.phaseIndex !== undefined && this.session.phases[data.phaseIndex]) {
      const targetPhase = this.session.phases[data.phaseIndex];
      saveLogToRoot(`üîç [onConfirmationModalEditPick] Jogador encontrado: ${JSON.stringify({
        phaseIndex: data.phaseIndex,
        playerId: targetPhase.playerId,
        playerName: targetPhase.playerName,
        action: targetPhase.action,
        champion: targetPhase.champion?.name
      })}`);
    } else {
      saveLogToRoot(`‚ö†Ô∏è [onConfirmationModalEditPick] AVISO: Fase n√£o encontrada para phaseIndex=${data.phaseIndex}`);
    }

    // ‚úÖ ALTERAR MODAIS: Fechar confirma√ß√£o e abrir campe√£o
    this.showConfirmationModal = false;
    this.showChampionModal = true;
    saveLogToRoot(`üîÑ [onConfirmationModalEditPick] MODAIS ALTERADOS: showChampionModal=${this.showChampionModal}, showConfirmationModal=${this.showConfirmationModal}`);

    logDraft('‚úÖ [onConfirmationModalEditPick] Modal de edi√ß√£o configurado');
    saveLogToRoot(`‚úÖ [onConfirmationModalEditPick] Modo edi√ß√£o ativado para jogador: ${data.playerId}`);

    // ‚úÖ DIAGN√ìSTICO: Verificar condi√ß√µes do template ANTES de detectChanges
    const sessionOk = this.session ? 'true' : 'false';
    const phaseOk = this.session?.phase !== 'completed' ? 'true' : 'false';
    const actionOk = this.session ? this.session.currentAction < this.session.phases.length : 'session_null';
    saveLogToRoot(`üîç [onConfirmationModalEditPick] CONDI√á√ïES TEMPLATE: isVisible=${this.showChampionModal}, session=${sessionOk}, phase!='completed'=${phaseOk}, currentAction<phases.length=${actionOk}`);

    // ‚úÖ FOR√áAR detec√ß√£o de mudan√ßas IMEDIATAMENTE
    this.cdr.detectChanges();
    saveLogToRoot(`üîÑ [onConfirmationModalEditPick] Detec√ß√£o de mudan√ßas for√ßada`);

    // ‚úÖ VERIFICA√á√ÉO: Timeout para garantir que o estado n√£o foi sobrescrito
    setTimeout(() => {
      saveLogToRoot(`üïí [onConfirmationModalEditPick] VERIFICA√á√ÉO (100ms): showChampionModal=${this.showChampionModal}, showConfirmationModal=${this.showConfirmationModal}, isEditingMode=${this.isEditingMode}`);

      // ‚úÖ DIAGN√ìSTICO: Verificar condi√ß√µes do template AP√ìS timeout
      const sessionOk2 = this.session ? 'true' : 'false';
      const phaseOk2 = this.session?.phase !== 'completed' ? 'true' : 'false';
      const actionOk2 = this.session ? this.session.currentAction < this.session.phases.length : 'session_null';
      saveLogToRoot(`üîç [onConfirmationModalEditPick] CONDI√á√ïES TEMPLATE (100ms): isVisible=${this.showChampionModal}, session=${sessionOk2}, phase!='completed'=${phaseOk2}, currentAction<phases.length=${actionOk2}`);

      if (!this.showChampionModal || this.showConfirmationModal || !this.isEditingMode) {
        saveLogToRoot(`üö® [onConfirmationModalEditPick] ESTADO INCORRETO - CORRIGINDO`);
        this.isEditingMode = true;
        this.showChampionModal = true;
        this.showConfirmationModal = false;
        this.cdr.detectChanges();
        saveLogToRoot(`üîß [onConfirmationModalEditPick] Estado corrigido`);
      }
    }, 100);
    saveLogToRoot(`ÔøΩ [onConfirmationModalEditPick] Detec√ß√£o de mudan√ßas for√ßada`);
  }

  // ‚úÖ NOVO: M√©todo para atualizar estado do draft
  async onConfirmationModalRefresh(): Promise<void> {
    logDraft('üîÑ [onConfirmationModalRefresh] === ATUALIZANDO ESTADO DO DRAFT ===');
    saveLogToRoot(`üîÑ [onConfirmationModalRefresh] Solicitando atualiza√ß√£o do estado do draft`);

    try {
      // For√ßar sincroniza√ß√£o com o backend
      await this.syncSessionWithBackend();

      // Invalidar caches do modal de confirma√ß√£o
      this.cdr.detectChanges();

      logDraft('‚úÖ [onConfirmationModalRefresh] Estado do draft atualizado com sucesso');
      saveLogToRoot(`‚úÖ [onConfirmationModalRefresh] Estado atualizado`);
    } catch (error) {
      logDraft('‚ùå [onConfirmationModalRefresh] Erro ao atualizar estado:', error);
      saveLogToRoot(`‚ùå [onConfirmationModalRefresh] Erro: ${error}`);
    }
  }

  // ‚úÖ NOVO: M√©todo para alterar pick no backend
  async changePlayerPick(championId: number): Promise<void> {
    logDraft('üîÑ [changePlayerPick] === ALTERANDO PICK ===');
    saveLogToRoot(`üîÑ [changePlayerPick] Alterando pick para campe√£o ${championId}`);

    try {
      if (!this.matchId || !this.currentPlayer) {
        throw new Error('matchId ou currentPlayer n√£o dispon√≠vel');
      }

      const playerId = this.currentPlayer.id?.toString() ||
        (this.currentPlayer.gameName && this.currentPlayer.tagLine
          ? `${this.currentPlayer.gameName}#${this.currentPlayer.tagLine}`
          : this.currentPlayer.summonerName || this.currentPlayer.name);

      const response = await firstValueFrom(this.http.post(`${this.baseUrl}/match/draft-action`, {
        matchId: this.matchId,
        playerId: playerId,
        championId: championId,
        action: 'pick', // Para changePlayerPick sempre √© pick
        actionIndex: 0 // Para mudan√ßa de pick, usar 0 como padr√£o
      }));

      logDraft('‚úÖ [changePlayerPick] Pick alterado com sucesso:', response);
      saveLogToRoot(`‚úÖ [changePlayerPick] Pick alterado com sucesso: ${JSON.stringify(response)}`);

      // Fechar modal de campe√£o e reabrir modal de confirma√ß√£o
      this.showChampionModal = false;
      this.showConfirmationModal = true;
      this.cdr.detectChanges();

      // Sincronizar com backend para obter dados atualizados
      await this.syncSessionWithBackend();
    } catch (error) {
      logDraft('‚ùå [changePlayerPick] Erro ao alterar pick:', error);
      saveLogToRoot(`‚ùå [changePlayerPick] Erro: ${JSON.stringify(error)}`);
    }
  }

  // ‚úÖ NOVO: M√©todo para atualizar pick espec√≠fico de um jogador
  async updatePlayerPick(playerId: string, champion: Champion): Promise<void> {
    logDraft('üîÑ [updatePlayerPick] === ATUALIZANDO PICK ===');
    saveLogToRoot(`üîÑ [updatePlayerPick] Atualizando pick de ${playerId} para ${champion.name}`);

    try {
      if (!this.matchId) {
        throw new Error('matchId n√£o dispon√≠vel');
      }

      if (!this.currentEditingPlayer) {
        throw new Error('currentEditingPlayer n√£o dispon√≠vel');
      }

      // ‚úÖ CORRE√á√ÉO: Buscar o summonerName correto da fase que est√° sendo editada
      const phaseIndex = this.currentEditingPlayer.phaseIndex;
      const targetPhase = this.session?.phases?.[phaseIndex];

      if (!targetPhase) {
        throw new Error(`Fase ${phaseIndex} n√£o encontrada`);
      }

      // ‚úÖ USAR o playerName da fase (que √© o summonerName correto)
      const correctPlayerId = targetPhase.playerName || targetPhase.playerId;
      saveLogToRoot(`üîß [updatePlayerPick] Usando playerId correto: ${correctPlayerId} (original: ${playerId})`);

      // ‚úÖ DEBUG: Log da URL completa
      const fullUrl = `${this.baseUrl}/match/change-pick`;
      saveLogToRoot(`üîç [updatePlayerPick] URL completa: ${fullUrl}`);
      saveLogToRoot(`üîç [updatePlayerPick] baseUrl: "${this.baseUrl}"`);

      const response = await firstValueFrom(this.http.post(fullUrl, {
        matchId: this.matchId,
        playerId: correctPlayerId,
        championId: Number(champion.id)
      }));

      logDraft('‚úÖ [updatePlayerPick] Pick atualizado com sucesso:', response);
      saveLogToRoot(`‚úÖ [updatePlayerPick] Pick atualizado: ${JSON.stringify(response)}`);

      // Sincronizar com backend para obter dados atualizados
      await this.syncSessionWithBackend();

      // ‚úÖ FINALIZAR EDI√á√ÉO e abrir modal de confirma√ß√£o
      this.isEditingMode = false;
      this.currentEditingPlayer = null;
      this.showChampionModal = false;
      this.showConfirmationModal = true; // ‚úÖ REABRIR modal de confirma√ß√£o
      this.cdr.detectChanges();
      saveLogToRoot(`‚úÖ [updatePlayerPick] Pick atualizado e modal de confirma√ß√£o reaberto`);
    } catch (error) {
      logDraft('‚ùå [updatePlayerPick] Erro:', error);
      saveLogToRoot(`‚ùå [updatePlayerPick] Erro detalhado: ${JSON.stringify(error, null, 2)}`);
      saveLogToRoot(`‚ùå [updatePlayerPick] Erro string: ${String(error)}`);
      if (error instanceof Error) {
        saveLogToRoot(`‚ùå [updatePlayerPick] Error.message: ${error.message}`);
        saveLogToRoot(`‚ùå [updatePlayerPick] Error.stack: ${error.stack}`);
      }
      throw error;
    }
  }

  // ‚úÖ M√âTODOS DE TIMER E TIMEOUT
  updateTimerFromBackend(data: any): void {
    // ‚úÖ CORRE√á√ÉO: Backend √© a √öNICA fonte de verdade para o timer
    if (!data || typeof data.timeRemaining !== 'number') {
      saveLogToRoot(`‚ö†Ô∏è [updateTimerFromBackend] Dados inv√°lidos: ${JSON.stringify(data)}`);
      return;
    }

    // ‚úÖ CORRE√á√ÉO: Sempre usar o valor do backend
    const oldTimeRemaining = this.timeRemaining;
    this.timeRemaining = data.timeRemaining;

    saveLogToRoot(`‚è∞ [updateTimerFromBackend] Timer atualizado: ${oldTimeRemaining}s ‚Üí ${data.timeRemaining}s`);
    logDraft(`‚è∞ [updateTimerFromBackend] Timer do backend: ${data.timeRemaining}s`);

    // ‚úÖ CORRE√á√ÉO: For√ßar atualiza√ß√£o da interface
    this.cdr.detectChanges();

    // ‚úÖ CORRE√á√ÉO: Verificar se timer expirou
    if (data.timeRemaining <= 0) {
      saveLogToRoot(`‚è∞ [updateTimerFromBackend] Timer expirou (${data.timeRemaining}s)`);
      logDraft(`‚è∞ [updateTimerFromBackend] Timer expirou - aguardando backend`);
    }
  }

  handleDraftTimeout(data: any): void {
    logDraft('‚è∞ [DraftPickBan] === HANDLE DRAFT TIMEOUT ===');

    if (data.matchId && this.matchId && data.matchId !== this.matchId) {
      logDraft('‚ö†Ô∏è [DraftPickBan] Timeout para matchId diferente:', data.matchId, 'vs', this.matchId);
      return;
    }

    const isTimeoutForCurrentPlayer = data.playerId && this.currentPlayer &&
      (data.playerId === this.currentPlayer.displayName ||
        data.playerId === this.currentPlayer.summonerName ||
        data.playerId === this.currentPlayer.name);

    if (isTimeoutForCurrentPlayer) {
      logDraft('‚è∞ [DraftPickBan] Timeout para o jogador atual, fechando modais');
      this.showChampionModal = false;
      this.showConfirmationModal = false;
      this.isWaitingBackend = false;
    }

    this.cdr.detectChanges();
    logDraft('‚è∞ [DraftPickBan] Timeout processado com sucesso');
  }

  // ‚úÖ M√âTODOS AUXILIARES
  private isBlueTeam(team: any): boolean {
    if (team === 1) return true;
    if (typeof team === 'string') {
      return ['blue', 'Blue', 'BLUE', 'team1'].includes(team);
    }
    return false;
  }

  isPlayerAutofill(player: any): boolean {
    return player.isAutofill === true;
  }

  getLaneDisplayWithAutofill(player: any): string {
    const lane = this.getLaneDisplayName(player.lane || player.assignedLane);
    const autofillText = this.isPlayerAutofill(player) ? ' (Autofill)' : '';
    return lane + autofillText;
  }

  getAutofillClass(player: any): string {
    return this.isPlayerAutofill(player) ? 'autofill-player' : '';
  }

  trackByPlayer(index: number, player: any): string {
    return player.summonerName || player.name || index.toString();
  }

  trackByChampion(index: number, champion: Champion): string {
    return champion.id.toString() || champion.key || index.toString();
  }

  // ‚úÖ NOVO: M√©todo para receber a√ß√µes do draft do backend
  handleDraftAction(data: any): void {
    logDraft('üîÑ [DraftPickBan] === HANDLE DRAFT ACTION ===');
    logDraft('üîÑ [DraftPickBan] Dados da a√ß√£o:', data);

    // Atualizar dados da sess√£o com informa√ß√µes do backend
    if (data.currentAction !== undefined) {
      this.session = {
        ...this.session,
        currentAction: data.currentAction,
        lastAction: data.lastAction
      };
    }

    // Atualizar interface
    this.updateDraftState();
    this.updateInterfaceState();
    this.checkIfMyTurn();

    // For√ßar atualiza√ß√£o da interface
    this.cdr.detectChanges();
    logDraft('üîÑ [DraftPickBan] A√ß√£o do draft processada com sucesso');
  }

  // ‚úÖ NOVO: M√©todo para receber mudan√ßas de jogador do backend
  handlePlayerChange(data: any): void {
    logDraft('üîÑ [DraftPickBan] === HANDLE PLAYER CHANGE ===');
    logDraft('üîÑ [DraftPickBan] Dados da mudan√ßa de jogador:', data);

    // Atualizar currentAction da sess√£o
    if (data.currentAction !== undefined) {
      this.session = {
        ...this.session,
        currentAction: data.currentAction
      };
    }

    // Atualizar interface
    this.updateDraftState();
    this.updateInterfaceState();
    this.checkIfMyTurn();

    // For√ßar atualiza√ß√£o da interface
    this.cdr.detectChanges();
    logDraft('üîÑ [DraftPickBan] Mudan√ßa de jogador processada com sucesso');
  }

  // ‚úÖ NOVO: M√©todo para receber sincroniza√ß√£o de dados do draft do backend
  handleDraftDataSync(data: any): void {
    logDraft('üîÑ [DraftPickBan] === HANDLE DRAFT DATA SYNC ===');
    logDraft('üîÑ [DraftPickBan] Dados da sincroniza√ß√£o:', data);
    saveLogToRoot(`üîÑ [handleDraftDataSync] Dados recebidos: ${JSON.stringify(data)}`);

    // ‚úÖ NOVO: Log detalhado do currentAction antes da atualiza√ß√£o
    const oldCurrentAction = this.session?.currentAction || 0;
    saveLogToRoot(`üîÑ [handleDraftDataSync] currentAction ANTES: ${oldCurrentAction}`);

    // Atualizar dados da sess√£o com informa√ß√µes sincronizadas
    if (data.pickBanData) {
      const pickBanData = typeof data.pickBanData === 'string'
        ? JSON.parse(data.pickBanData)
        : data.pickBanData;

      // ‚úÖ NOVO: Log detalhado dos dados do backend
      saveLogToRoot(`üîÑ [handleDraftDataSync] Backend totalActions: ${data.totalActions}`);
      saveLogToRoot(`üîÑ [handleDraftDataSync] Backend currentAction: ${data.currentAction}`);
      saveLogToRoot(`üîÑ [handleDraftDataSync] Backend actions.length: ${pickBanData.actions?.length || 0}`);

      this.session = {
        ...this.session,
        blueTeam: pickBanData.team1 || this.session.blueTeam || [],
        redTeam: pickBanData.team2 || this.session.redTeam || [],
        phases: pickBanData.phases || this.session.phases || [],
        currentAction: data.currentAction || 0, // ‚úÖ CORRE√á√ÉO: Usar currentAction do backend
        phase: pickBanData.phase || this.session.phase || 'bans',
        actions: pickBanData.actions || this.session.actions || [],
        team1Picks: pickBanData.team1Picks || this.session.team1Picks || [],
        team1Bans: pickBanData.team1Bans || this.session.team1Bans || [],
        team2Picks: pickBanData.team2Picks || this.session.team2Picks || [],
        team2Bans: pickBanData.team2Bans || this.session.team2Bans || [],
        totalActions: data.totalActions,
        totalPicks: data.totalPicks,
        totalBans: data.totalBans,
        team1Stats: data.team1Stats,
        team2Stats: data.team2Stats,
        lastAction: data.lastAction,
        lastSyncTime: Date.now()
      };
    }

    // ‚úÖ NOVO: Log detalhado do currentAction ap√≥s a atualiza√ß√£o
    const newCurrentAction = this.session?.currentAction || 0;
    saveLogToRoot(`üîÑ [handleDraftDataSync] currentAction DEPOIS: ${newCurrentAction}`);
    saveLogToRoot(`üîÑ [handleDraftDataSync] Mudan√ßa: ${oldCurrentAction} ‚Üí ${newCurrentAction}`);

    // Atualizar interface
    this.updateDraftState();
    this.updateInterfaceState();
    this.checkIfMyTurn();

    // For√ßar atualiza√ß√£o da interface
    this.cdr.detectChanges();
    logDraft('üîÑ [DraftPickBan] Sincroniza√ß√£o de dados processada com sucesso');
    saveLogToRoot(`‚úÖ [handleDraftDataSync] Sincroniza√ß√£o conclu√≠da`);
  }
}
